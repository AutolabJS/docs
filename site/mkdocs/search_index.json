{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to AutolabJS\n\n\nThis doc is managed by \nAutolabJS\n.\n\n\nCurrent Projects\n\n\n\n\nAutolabJS\n\n\nAutolabCLI\n\n\nAutolabWebsite\n\n\ndocs",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-autolabjs",
            "text": "This doc is managed by  AutolabJS .",
            "title": "Welcome to AutolabJS"
        },
        {
            "location": "/#current-projects",
            "text": "AutolabJS  AutolabCLI  AutolabWebsite  docs",
            "title": "Current Projects"
        },
        {
            "location": "/AutolabJS/",
            "text": "Home\n\n\nWelcome to the AutolabJS wiki!\n\n\nUse the navigation sidebar to get to the page of interest.\n\n\nWant to contribute?, you are highly welcome. But, please follow the \ncoding standards\n before you submit a pull request.\n\n\nContributors\n\n\nThis project benefited from contributions of the following developers. The names are given in alphabetical order.\n\n\nAnkshit Jain, Gaurav Narula, Kashyap Gajera, Prasad Talasila, Rajat Agarwal, Tejas Sangol, Utkarsh Maheshwari, Vinamra Bhatia, Yash Singh\n\n\nFor more details, please see the \ncontributors graph",
            "title": "Home"
        },
        {
            "location": "/AutolabJS/#home",
            "text": "Welcome to the AutolabJS wiki!  Use the navigation sidebar to get to the page of interest.  Want to contribute?, you are highly welcome. But, please follow the  coding standards  before you submit a pull request.",
            "title": "Home"
        },
        {
            "location": "/AutolabJS/#contributors",
            "text": "This project benefited from contributions of the following developers. The names are given in alphabetical order.  Ankshit Jain, Gaurav Narula, Kashyap Gajera, Prasad Talasila, Rajat Agarwal, Tejas Sangol, Utkarsh Maheshwari, Vinamra Bhatia, Yash Singh  For more details, please see the  contributors graph",
            "title": "Contributors"
        },
        {
            "location": "/AutolabJS-v010/",
            "text": "v0.1 Documentation\n\n\nDeployment Tutorial\n\n\n\n\nOn Localhost (Single Machine)\n   \n\n\nOn Two Machines\n   \n\n\nOn Azure Cloud\n\n\nJSON details\n\n\n\n\nTutorials for Lab Authors\n\n\n\n\nCreating a Lab\n\n\nAutomate lab/user create/update/delete\n       \n\n\n\n\nTutorials for Students\n\n\n\n\nMaking a Submission\n\n\nPost lab self evaluation",
            "title": "Home"
        },
        {
            "location": "/AutolabJS-v010/#v01-documentation",
            "text": "",
            "title": "v0.1 Documentation"
        },
        {
            "location": "/AutolabJS-v010/#deployment-tutorial",
            "text": "On Localhost (Single Machine)      On Two Machines      On Azure Cloud  JSON details",
            "title": "Deployment Tutorial"
        },
        {
            "location": "/AutolabJS-v010/#tutorials-for-lab-authors",
            "text": "Creating a Lab  Automate lab/user create/update/delete",
            "title": "Tutorials for Lab Authors"
        },
        {
            "location": "/AutolabJS-v010/#tutorials-for-students",
            "text": "Making a Submission  Post lab self evaluation",
            "title": "Tutorials for Students"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/",
            "text": "Installing Docker\n\n\nsudo apt-get install -y docker.io\n\n\nsystemctl start docker\n\n\nManaging Containers\n\n\n\n\nTo stop a container: \nsudo docker stop <contianer_id/name>\n\n\nTo remove a container: \nsudo docker rm <contianer_id/name>\n\n\nTo restart a container: \nsudo docker restart <contianer_id/name>\n\n\nTo access a container bash: \nsudo docker exec -it <contianer_id/name> bash\n\n\n\n\nSetting up MySQL using Docker\n\n\n\n\nStart a docker container mapping a location (e.g. \n/home/autolab/AutolabJS/sqldata\n) for storing MySQL data:\n\nsudo docker run --name autolab-db --net=host -v /home/autolab/AutolabJS/sqldata:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest\n\n\nsudo docker exec -it autolab-db bash\n to enter bash of mysql\n\n\nmysql -u root -p\n and enter password.\n\n\nEnter \ncreate database Autolab\n in the mysql console.\n\n\nExit from container.\n\n\n\n\nSetting up GitLab using Docker\n\n\n\n\nChange SSH port of the machine to 2222: \nsudo vi /etc/ssh/sshd_config\n\n\n\n\n# What ports, IPs and protocols we listen for\n\n\nPort 22\n\n\nChange this to 2222\n\n Listen to the new port by restarting SSH - \n/etc/init.d/ssh restart\n\n\n Download and start GitLab Docker image. It will be started on port \n80\n.\n\n\nsudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n\n\n Visit localhost in the browser.\n\n Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html\n\n In GitLab user as \nroot\n with an empty repository as \ntest\n.\n\n Create a GitLab user as \nlab_author\n.\n\n Create GitLab user for students as \n2013B2A7866G\n and other ID numbers.\n\n To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -      \n\n\nsudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb\n     \n\n\nsudo docker exec -it gitlab mkdir /etc/gitlab/ssl\n     \n\n\nsudo docker cp ./localhost.key gitlab:/etc/gitlab/ssl/\n     \n\n\nsudo docker cp ./localhost.crt gitlab:/etc/gitlab/ssl/\n       \n\n\nDeploying Load Balancer\n\n\n\n\nClone this repo: \nhttps://github.com/AutolabJS/AutolabJS\n\n\nChange the directory to load_balancer and build load balancer image - \nsudo docker build -t load_balancer .\n\n\nTo start the container, specify the full path of the directory to store the submissions. It will be mapped to \n/load_balancer/submissions\n of the container. Example: \nsudo docker run --name load_balancer --net=host -v /home/autolab/AutolabJS/load_balancer/submissions:/load_balancer/submissions -v /etc/localtime:/etc/localtime:ro -d -i -t load_balancer\n\n\nTo access the bash shell of the container \nsudo docker exec -it load_balancer bash\n\n\nGenerate SSH key for GitLab: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user by doing the following: \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.\n\n\nDefine parameters in \nnodes_data_config.json\n: \ncd load_balancer\n \nvi nodes_data_config.json\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n. Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.\n\n\nRun the server: \nnohup nodejs load_balancer.js &\n\n\nPress enter and exit.\n\n\n\n\nDeploying Main Server\n\n\n\n\nChange the directory to main_server and build main server image - \nsudo docker build -t main_server .\n.\n\n\nsudo docker run --net=host --name main_server -v /etc/localtime:/etc/localtime:ro -d -i -t main_server\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it main_server bash\n\n\nDefine parameters in \nconf.json\n and \nlabs.json\n: \ncd main_server\n \nvi conf.json\n \nvi labs.json\n\n\nRun the server: \nnohup nodejs main_server.js &\n\n\nPress enter and exit\n\n\n\n\nDeploying Execution Node\n\n\n\n\nBuild execution node image - Change the directory to execution_node and build main server image - \nsudo docker build -t execution .\n\n\nsudo docker run --net=host -v /etc/localtime:/etc/localtime:ro -d -i -t execution\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it <container id> bash\n\n\nGenerate SSH key: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user - \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n\n\nDefine parameters in \nconf.json\n and \nscores.json\n: \ncd execution_nodes\n \nvi conf.json\n \nvi scores.json\n\n\nBefore proceeding further, make sure the load balancer is running.\n\n\nRun the server: \nnohup nodejs execute_node.js &\n\n\nPress enter and exit\n\n\nNow add the container Port and IP in \nnodes_data_conf.json\n file in the load balancer.\n\n\nRepeat for upto 5 containers.\n\n\n\n\nChecking Deployment:\n\n\n\n\nGitLab should be accessible on \nhttp://localhost\n\n\nVisit \nhttps://localhost:<main_server_port>/status\n to see the status of all microservices.\n\n\n\n\nReferences\n\n\n\n\nhttps://hub.docker.com/_/mysql/\n\n\nhttp://docs.gitlab.com/omnibus/docker/\n\n\nhttps://docs.docker.com/engine/installation/linux/ubuntulinux/\n\n\n\n\nGenerating HTTPS keys and certificates using openssl:\n\n\n\n\n$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem\n\n\n$ openssl rsa -in key.pem -out key.pem",
            "title": "Deployment-on-Single-Machine"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#installing-docker",
            "text": "sudo apt-get install -y docker.io  systemctl start docker",
            "title": "Installing Docker"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#managing-containers",
            "text": "To stop a container:  sudo docker stop <contianer_id/name>  To remove a container:  sudo docker rm <contianer_id/name>  To restart a container:  sudo docker restart <contianer_id/name>  To access a container bash:  sudo docker exec -it <contianer_id/name> bash",
            "title": "Managing Containers"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#setting-up-mysql-using-docker",
            "text": "Start a docker container mapping a location (e.g.  /home/autolab/AutolabJS/sqldata ) for storing MySQL data: sudo docker run --name autolab-db --net=host -v /home/autolab/AutolabJS/sqldata:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest  sudo docker exec -it autolab-db bash  to enter bash of mysql  mysql -u root -p  and enter password.  Enter  create database Autolab  in the mysql console.  Exit from container.",
            "title": "Setting up MySQL using Docker"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#setting-up-gitlab-using-docker",
            "text": "Change SSH port of the machine to 2222:  sudo vi /etc/ssh/sshd_config   # What ports, IPs and protocols we listen for  Port 22  Change this to 2222  Listen to the new port by restarting SSH -  /etc/init.d/ssh restart   Download and start GitLab Docker image. It will be started on port  80 .  sudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest   Visit localhost in the browser.  Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html  In GitLab user as  root  with an empty repository as  test .  Create a GitLab user as  lab_author .  Create GitLab user for students as  2013B2A7866G  and other ID numbers.  To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -        sudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb        sudo docker exec -it gitlab mkdir /etc/gitlab/ssl        sudo docker cp ./localhost.key gitlab:/etc/gitlab/ssl/        sudo docker cp ./localhost.crt gitlab:/etc/gitlab/ssl/",
            "title": "Setting up GitLab using Docker"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#deploying-load-balancer",
            "text": "Clone this repo:  https://github.com/AutolabJS/AutolabJS  Change the directory to load_balancer and build load balancer image -  sudo docker build -t load_balancer .  To start the container, specify the full path of the directory to store the submissions. It will be mapped to  /load_balancer/submissions  of the container. Example:  sudo docker run --name load_balancer --net=host -v /home/autolab/AutolabJS/load_balancer/submissions:/load_balancer/submissions -v /etc/localtime:/etc/localtime:ro -d -i -t load_balancer  To access the bash shell of the container  sudo docker exec -it load_balancer bash  Generate SSH key for GitLab:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user by doing the following:  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.  Define parameters in  nodes_data_config.json :  cd load_balancer   vi nodes_data_config.json  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git . Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.  Run the server:  nohup nodejs load_balancer.js &  Press enter and exit.",
            "title": "Deploying Load Balancer"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#deploying-main-server",
            "text": "Change the directory to main_server and build main server image -  sudo docker build -t main_server . .  sudo docker run --net=host --name main_server -v /etc/localtime:/etc/localtime:ro -d -i -t main_server  will give a container id.  To access the bash shell of the container  sudo docker exec -it main_server bash  Define parameters in  conf.json  and  labs.json :  cd main_server   vi conf.json   vi labs.json  Run the server:  nohup nodejs main_server.js &  Press enter and exit",
            "title": "Deploying Main Server"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#deploying-execution-node",
            "text": "Build execution node image - Change the directory to execution_node and build main server image -  sudo docker build -t execution .  sudo docker run --net=host -v /etc/localtime:/etc/localtime:ro -d -i -t execution  will give a container id.  To access the bash shell of the container  sudo docker exec -it <container id> bash  Generate SSH key:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user -  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git  Define parameters in  conf.json  and  scores.json :  cd execution_nodes   vi conf.json   vi scores.json  Before proceeding further, make sure the load balancer is running.  Run the server:  nohup nodejs execute_node.js &  Press enter and exit  Now add the container Port and IP in  nodes_data_conf.json  file in the load balancer.  Repeat for upto 5 containers.",
            "title": "Deploying Execution Node"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#checking-deployment",
            "text": "GitLab should be accessible on  http://localhost  Visit  https://localhost:<main_server_port>/status  to see the status of all microservices.",
            "title": "Checking Deployment:"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#references",
            "text": "https://hub.docker.com/_/mysql/  http://docs.gitlab.com/omnibus/docker/  https://docs.docker.com/engine/installation/linux/ubuntulinux/",
            "title": "References"
        },
        {
            "location": "/v0.1-Deploying-using-Docker/#generating-https-keys-and-certificates-using-openssl",
            "text": "$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem  $ openssl rsa -in key.pem -out key.pem",
            "title": "Generating HTTPS keys and certificates using openssl:"
        },
        {
            "location": "/v0.1-Two-Machines/",
            "text": "Installation instructions for deployment on two machines.\n\n\n\n\nMake sure Internet is active during the setup procedure.\n\n\n\n\nInstalling Docker\n\n\n\n\nInstall Docker on both machines \n\n\n\n\nsudo apt-get install -y docker.io\n\n\nsystemctl start docker\n\n\nManaging Containers\n\n\n\n\nTo stop a container: \nsudo docker stop <contianer_id/name>\n\n\nTo remove a container: \nsudo docker rm <contianer_id/name>\n\n\nTo restart a container: \nsudo docker restart <contianer_id/name>\n \n\n\nTo access a container bash: \nsudo docker exec -it <contianer_id/name> bash\n\n\n\n\nSetting up MySQL using Docker on Machine 1\n\n\n\n\nStart a docker container mapping a location (e.g. \n/home/autolab/JavaAutolab/sqldata\n) and specifying the root password for MySQL: \n\nsudo docker run --name autolab-db --net=host -v /home/autolab/JavaAutolab/sqldata:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest\n\n\nsudo docker exec -it autolab-db bash\n to enter bash of mysql\n\n\nmysql -u root -p\n and enter password.\n\n\nEnter \ncreate database Autolab\n in the mysql console.\n\n\nExit from container.\n\n\n\n\nSetting up GitLab using Docker on Machine 1\n\n\n\n\nChange SSH port of the machine to 2222: \nsudo vi /etc/ssh/sshd_config\n \n\n\n\n\n# What ports, IPs and protocols we listen for\n \n\n\nPort 22\n \n\n\nChange this to 2222\n\n Listen to the new port by restarting SSH - \n/etc/init.d/ssh restart\n\n\n Download and start GitLab Docker image. It will be started on port \n80\n.\n\n\nsudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n\n\n Visit localhost in the browser.\n\n Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html \n\n In GitLab user as \nroot\n with an empty repository as \ntest\n.\n\n Create a GitLab user as \nlab_author\n.\n\n Create GitLab user for students as \n2013B2A7866G\n and other ID numbers.\n\n To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -      \n\n\nsudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb\n     \n\n\nsudo docker exec -it gitlab mkdir /etc/gitlab/ssl\n     \n\n\nsudo docker cp ./localhost.key gitlab/etc/gitlab/ssl/\n     \n\n\nsudo docker cp ./localhost.crt gitlab/etc/gitlab/ssl/\n   \n\n\nDeploying Load Balancer on Machine 1\n\n\n\n\nClone this repo: \nhttps://github.com/prasadtalasila/JavaAutolab\n\n\nChange the directory to load_balancer and build load balancer image - \nsudo docker build -t load_balancer .\n\n\nTo start the container, specify the full path of the directory to store the submissions. It will be mapped to \n/load_balancer/submissions\n of the container. Example: \nsudo docker run --name load_balancer --net=host -v /home/autolab/JavaAutolab/load_balancer/submissions:/load_balancer/submissions -v /etc/localtime:/etc/localtime:ro -d -i -t load_balancer\n\n\nTo access the bash shell of the container \nsudo docker exec -it load_balancer bash\n\n\nGenerate SSH key for GitLab: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user by doing the following: \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host. \n\n\nDefine parameters in \nnodes_data_config.json\n: \ncd load_balancer\n \nvi nodes_data_config.json\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n. Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.\n\n\nRun the server: \nnohup nodejs load_balancer.js &\n\n\nPress enter and exit.\n\n\n\n\nDeploying Main Server on Machine 1\n\n\n\n\nChange the directory to main_server and build main server image - \nsudo docker build -t main_server .\n.\n\n\nsudo docker run --net=host --name main_server -v /etc/localtime:/etc/localtime:ro -d -i -t main_server\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it main_server bash\n\n\nDefine parameters in \nconf.json\n and \nlabs.json\n: \ncd main_server\n \nvi conf.json\n \nvi labs.json\n\n\nRun the server: \nnohup nodejs main_server.js &\n\n\nPress enter and exit\n\n\n\n\nDeploying Execution Node on Machine 2\n\n\n\n\nClone this repo: \nhttps://github.com/prasadtalasila/JavaAutolab\n\n\nBuild execution node image - Change the directory to execution_node and build main server image - \nsudo docker build -t execution .\n\n\nsudo docker run --net=host -v /etc/localtime:/etc/localtime:ro -d -i -t execution\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it <container id> bash\n\n\nGenerate SSH key: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user - \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n\n\nDefine parameters in \nconf.json\n and \nscores.json\n: \ncd execution_nodes\n \nvi conf.json\n \nvi scores.json\n\n\nBefore proceeding further, make sure the load balancer is running.\n\n\nRun the server: \nnohup nodejs execute_node.js &\n\n\nPress enter and exit\n\n\nNow add the container Port and IP in \nnodes_data_conf.json\n file in the load balancer.\n\n\nRepeat for upto 5 containers.\n\n\n\n\nChecking Deployment:\n\n\n\n\nGitLab should be accessible on \nhttp://<machine_1_ip>\n\n\nVisit \nhttps://<machine_1_ip>:<main_server_port>/status\n to see the status of all microservices.\n\n\n\n\nFirewall Rules:\n\n\nMachine 1\n\n\n\n\nAllow incoming SSH connections on port 2222.\n\n\nAllow incoming SSH connections on port 22.\n\n\nAllow all incoming requests on port 80.\n\n\nAllow all incoming requests on port 443.\n\n\nAllow all incoming requests on port \n<main_server_port>\n.\n\n\nAll other ports should be accessible only via machine 2. \n\n\n\n\nMachine 2\n\n\n\n\nAllow incoming SSH connections on port 22.\n\n\nAll other ports should be fully accessible only via machine 1. \n\n\n\n\nReferences\n\n\n\n\nhttps://hub.docker.com/_/mysql/\n\n\nhttp://docs.gitlab.com/omnibus/docker/\n\n\nhttps://docs.docker.com/engine/installation/linux/ubuntulinux/\n\n\nhttps://github.com/wsargent/docker-cheat-sheet\n\n\nhttp://stackoverflow.com/questions/19456129/how-to-change-url-of-a-working-gitlab-install/28005168#28005168\n\n\n\n\nGenerating HTTPS keys and certificates using openssl:\n\n\n\n\n$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem \n\n\n$ openssl rsa -in key.pem -out key.pem",
            "title": "On two machines"
        },
        {
            "location": "/v0.1-Two-Machines/#installing-docker",
            "text": "Install Docker on both machines    sudo apt-get install -y docker.io  systemctl start docker",
            "title": "Installing Docker"
        },
        {
            "location": "/v0.1-Two-Machines/#managing-containers",
            "text": "To stop a container:  sudo docker stop <contianer_id/name>  To remove a container:  sudo docker rm <contianer_id/name>  To restart a container:  sudo docker restart <contianer_id/name>    To access a container bash:  sudo docker exec -it <contianer_id/name> bash",
            "title": "Managing Containers"
        },
        {
            "location": "/v0.1-Two-Machines/#setting-up-mysql-using-docker-on-machine-1",
            "text": "Start a docker container mapping a location (e.g.  /home/autolab/JavaAutolab/sqldata ) and specifying the root password for MySQL:  sudo docker run --name autolab-db --net=host -v /home/autolab/JavaAutolab/sqldata:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest  sudo docker exec -it autolab-db bash  to enter bash of mysql  mysql -u root -p  and enter password.  Enter  create database Autolab  in the mysql console.  Exit from container.",
            "title": "Setting up MySQL using Docker on Machine 1"
        },
        {
            "location": "/v0.1-Two-Machines/#setting-up-gitlab-using-docker-on-machine-1",
            "text": "Change SSH port of the machine to 2222:  sudo vi /etc/ssh/sshd_config     # What ports, IPs and protocols we listen for    Port 22    Change this to 2222  Listen to the new port by restarting SSH -  /etc/init.d/ssh restart   Download and start GitLab Docker image. It will be started on port  80 .  sudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest   Visit localhost in the browser.  Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html   In GitLab user as  root  with an empty repository as  test .  Create a GitLab user as  lab_author .  Create GitLab user for students as  2013B2A7866G  and other ID numbers.  To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -        sudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb        sudo docker exec -it gitlab mkdir /etc/gitlab/ssl        sudo docker cp ./localhost.key gitlab/etc/gitlab/ssl/        sudo docker cp ./localhost.crt gitlab/etc/gitlab/ssl/",
            "title": "Setting up GitLab using Docker on Machine 1"
        },
        {
            "location": "/v0.1-Two-Machines/#deploying-load-balancer-on-machine-1",
            "text": "Clone this repo:  https://github.com/prasadtalasila/JavaAutolab  Change the directory to load_balancer and build load balancer image -  sudo docker build -t load_balancer .  To start the container, specify the full path of the directory to store the submissions. It will be mapped to  /load_balancer/submissions  of the container. Example:  sudo docker run --name load_balancer --net=host -v /home/autolab/JavaAutolab/load_balancer/submissions:/load_balancer/submissions -v /etc/localtime:/etc/localtime:ro -d -i -t load_balancer  To access the bash shell of the container  sudo docker exec -it load_balancer bash  Generate SSH key for GitLab:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user by doing the following:  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.   Define parameters in  nodes_data_config.json :  cd load_balancer   vi nodes_data_config.json  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git . Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.  Run the server:  nohup nodejs load_balancer.js &  Press enter and exit.",
            "title": "Deploying Load Balancer on Machine 1"
        },
        {
            "location": "/v0.1-Two-Machines/#deploying-main-server-on-machine-1",
            "text": "Change the directory to main_server and build main server image -  sudo docker build -t main_server . .  sudo docker run --net=host --name main_server -v /etc/localtime:/etc/localtime:ro -d -i -t main_server  will give a container id.  To access the bash shell of the container  sudo docker exec -it main_server bash  Define parameters in  conf.json  and  labs.json :  cd main_server   vi conf.json   vi labs.json  Run the server:  nohup nodejs main_server.js &  Press enter and exit",
            "title": "Deploying Main Server on Machine 1"
        },
        {
            "location": "/v0.1-Two-Machines/#deploying-execution-node-on-machine-2",
            "text": "Clone this repo:  https://github.com/prasadtalasila/JavaAutolab  Build execution node image - Change the directory to execution_node and build main server image -  sudo docker build -t execution .  sudo docker run --net=host -v /etc/localtime:/etc/localtime:ro -d -i -t execution  will give a container id.  To access the bash shell of the container  sudo docker exec -it <container id> bash  Generate SSH key:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user -  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git  Define parameters in  conf.json  and  scores.json :  cd execution_nodes   vi conf.json   vi scores.json  Before proceeding further, make sure the load balancer is running.  Run the server:  nohup nodejs execute_node.js &  Press enter and exit  Now add the container Port and IP in  nodes_data_conf.json  file in the load balancer.  Repeat for upto 5 containers.",
            "title": "Deploying Execution Node on Machine 2"
        },
        {
            "location": "/v0.1-Two-Machines/#checking-deployment",
            "text": "GitLab should be accessible on  http://<machine_1_ip>  Visit  https://<machine_1_ip>:<main_server_port>/status  to see the status of all microservices.",
            "title": "Checking Deployment:"
        },
        {
            "location": "/v0.1-Two-Machines/#firewall-rules",
            "text": "",
            "title": "Firewall Rules:"
        },
        {
            "location": "/v0.1-Two-Machines/#machine-1",
            "text": "Allow incoming SSH connections on port 2222.  Allow incoming SSH connections on port 22.  Allow all incoming requests on port 80.  Allow all incoming requests on port 443.  Allow all incoming requests on port  <main_server_port> .  All other ports should be accessible only via machine 2.",
            "title": "Machine 1"
        },
        {
            "location": "/v0.1-Two-Machines/#machine-2",
            "text": "Allow incoming SSH connections on port 22.  All other ports should be fully accessible only via machine 1.",
            "title": "Machine 2"
        },
        {
            "location": "/v0.1-Two-Machines/#references",
            "text": "https://hub.docker.com/_/mysql/  http://docs.gitlab.com/omnibus/docker/  https://docs.docker.com/engine/installation/linux/ubuntulinux/  https://github.com/wsargent/docker-cheat-sheet  http://stackoverflow.com/questions/19456129/how-to-change-url-of-a-working-gitlab-install/28005168#28005168",
            "title": "References"
        },
        {
            "location": "/v0.1-Two-Machines/#generating-https-keys-and-certificates-using-openssl",
            "text": "$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem   $ openssl rsa -in key.pem -out key.pem",
            "title": "Generating HTTPS keys and certificates using openssl:"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/",
            "text": "Installation instructions on Azure cloud\n\n\nInstalling Docker\n\n\n\n\nInstall Docker on both machines \n\n\n\n\nsudo apt-get install -y docker.io\n\n\nsystemctl start docker\n\n\nManaging Containers\n\n\n\n\nTo stop a container: \nsudo docker stop <contianer_id/name>\n\n\nTo remove a container: \nsudo docker rm <contianer_id/name>\n\n\nTo restart a container: \nsudo docker restart <contianer_id/name>\n \n\n\nTo access a container bash: \nsudo docker exec -it <contianer_id/name> bash\n\n\n\n\nSetting up MySQL using Docker on Machine 1\n\n\n\n\nStart a docker container mapping a location (e.g. \n/home/autolab/JavaAutolab/sqldata\n) and specifying the root password for MySQL: \n\nsudo docker run --name autolab-db --net=host -v /home/autolab/JavaAutolab/sqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest\n\n\nsudo docker exec -it autolab-db bash\n to enter bash of mysql\n\n\nmysql -u root -p\n and enter password.\n\n\nEnter \ncreate database Autolab\n in the mysql console.\n\n\nExit from container.\n\n\n\n\nSetting up GitLab using Docker on Machine 1\n\n\n\n\nChange SSH port of the machine to 2222: \nsudo vi /etc/ssh/sshd_config\n \n\n\n\n\n# What ports, IPs and protocols we listen for\n \n\n\nPort 22\n \n\n\nChange this to 2222\n\n Listen to the new port by restarting SSH - \n/etc/init.d/ssh restart\n\n\n Download and start GitLab Docker image. It will be started on port \n80\n.\n\n\nsudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n\n\n Visit localhost in the browser.\n\n Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html \n\n In GitLab user as \nroot\n with an empty repository as \ntest\n.\n\n Create a GitLab user as \nlab_author\n.\n\n Create GitLab user for students as \n2013B2A7866G\n and other ID numbers.\n\n To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -      \n\n\nsudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb\n     \n\n\nsudo docker exec -it gitlab mkdir /etc/gitlab/ssl\n     \n\n\nsudo docker cp ./localhost.key gitlab/etc/gitlab/ssl/\n     \n\n\nsudo docker cp ./localhost.crt gitlab/etc/gitlab/ssl/\n  \n\n\nDeploying Load Balancer on Machine 1\n\n\n\n\nClone this repo: \nhttps://github.com/prasadtalasila/JavaAutolab\n\n\nChange the directory to load_balancer and build load balancer image - \nsudo docker build -t load_balancer .\n\n\nTo start the container, specify the full path of the directory to store the submissions. It will be mapped to \n/load_balancer/submissions\n of the container. Example: \nsudo docker run --name load_balancer --net=host -v /home/autolab/JavaAutolab/load_balancer/submissions:/load_balancer/submissions -d -i -t load_balancer\n\n\nTo access the bash shell of the container \nsudo docker exec -it load_balancer bash\n\n\nGenerate SSH key for GitLab: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user by doing the following: \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host. \n\n\nDefine parameters in \nnodes_data_config.json\n: \ncd load_balancer\n \nvi nodes_data_config.json\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n. Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.\n\n\nRun the server: \nnohup nodejs load_balancer.js &\n\n\nPress enter and exit.\n\n\n\n\nDeploying Main Server on Machine 1\n\n\n\n\nChange the directory to main_server and build main server image - \nsudo docker build -t main_server .\n.\n\n\nsudo docker run --net=host --name main_server -d -i -t main_server\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it main_server bash\n\n\nDefine parameters in \nconf.json\n and \nlabs.json\n: \ncd main_server\n \nvi conf.json\n \nvi labs.json\n\n\nRun the server: \nnohup nodejs main_server.js &\n\n\nPress enter and exit\n\n\n\n\nDeploying Execution Node on Machine 2\n\n\n\n\nClone this repo: \nhttps://github.com/prasadtalasila/JavaAutolab\n\n\nBuild execution node image - Change the directory to execution_node and build main server image - \nsudo docker build -t execution .\n\n\nsudo docker run --net=host -d -i -t execution\n will give a container id.\n\n\nTo access the bash shell of the container \nsudo docker exec -it <container id> bash\n\n\nGenerate SSH key: \nssh-keygen -t rsa -C \"admin@example.com\"\n\nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.\n\n\nAdd SSH Key to GitLab \nroot\n user - \ncat ~/.ssh/id_rsa.pub\n\nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.\n\n\nClone dummy repo for ssh init - \ngit clone git@<gitlab_ip_without_port>:root/test.git\n\n\nDefine parameters in \nconf.json\n and \nscores.json\n: \ncd execution_nodes\n \nvi conf.json\n \nvi scores.json\n\n\nBefore proceeding further, make sure the load balancer is running.\n\n\nRun the server: \nnohup nodejs execute_node.js &\n\n\nPress enter and exit\n\n\nNow add the container Port and IP in \nnodes_data_conf.json\n file in the load balancer.\n\n\nRepeat for upto 5 containers.\n\n\n\n\nChecking Deployment:\n\n\n\n\nGitLab should be accessible on \nhttp://<machine_1_ip>\n\n\nVisit \nhttps://<machine_1_ip>:<main_server_port>/status\n to see the status of all microservices.\n\n\n\n\nReferences\n\n\n\n\nhttps://hub.docker.com/_/mysql/\n\n\nhttp://docs.gitlab.com/omnibus/docker/\n\n\nhttps://docs.docker.com/engine/installation/linux/ubuntulinux/\n\n\n\n\nGenerating HTTPS keys and certificates using openssl:\n\n\n\n\n$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem \n\n\n$ openssl rsa -in key.pem -out key.pem\n\n\n\n\nSecurity Rules for Main Server VM:\n\n\nInbound Allowed\n\n\ndefault-allow-ssh\n\n\nSource: Any\n\n\nProtocol: TCP\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 22\n\n\nssh\n\n\nSource: Any\n\n\nProtocol: TCP\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 2222\n\n\nstudent_main_server\n\n\nSource: Any\n\n\nProtocol: Any\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 9000 (or the main server host port)\n\n\ngitlab_http\n\n\nSource: Any\n\n\nProtocol: Any\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 80\n\n\ngitlab_https\n\n\nSource: Any\n\n\nProtocol: Any\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 443\n\n\nOutbound\n\n\nNone\n\n\nSecurity Rules for Execution Node VM:\n\n\nInbound Allowed\n\n\ndefault-allow-ssh\n\n\nSource: Any\n\n\nProtocol: TCP\n\n\nPort: *\n\n\nDestination: Any\n\n\nPort: 22\n\n\nOutbound\n\n\nNone",
            "title": "On Azure cloud"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#installing-docker",
            "text": "Install Docker on both machines    sudo apt-get install -y docker.io  systemctl start docker",
            "title": "Installing Docker"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#managing-containers",
            "text": "To stop a container:  sudo docker stop <contianer_id/name>  To remove a container:  sudo docker rm <contianer_id/name>  To restart a container:  sudo docker restart <contianer_id/name>    To access a container bash:  sudo docker exec -it <contianer_id/name> bash",
            "title": "Managing Containers"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#setting-up-mysql-using-docker-on-machine-1",
            "text": "Start a docker container mapping a location (e.g.  /home/autolab/JavaAutolab/sqldata ) and specifying the root password for MySQL:  sudo docker run --name autolab-db --net=host -v /home/autolab/JavaAutolab/sqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=your_password_here -d mysql:latest  sudo docker exec -it autolab-db bash  to enter bash of mysql  mysql -u root -p  and enter password.  Enter  create database Autolab  in the mysql console.  Exit from container.",
            "title": "Setting up MySQL using Docker on Machine 1"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#setting-up-gitlab-using-docker-on-machine-1",
            "text": "Change SSH port of the machine to 2222:  sudo vi /etc/ssh/sshd_config     # What ports, IPs and protocols we listen for    Port 22    Change this to 2222  Listen to the new port by restarting SSH -  /etc/init.d/ssh restart   Download and start GitLab Docker image. It will be started on port  80 .  sudo docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest   Visit localhost in the browser.  Reset 'root' password of GitLab as follows:\nhttp://docs.gitlab.com/ce/security/reset_root_password.html   In GitLab user as  root  with an empty repository as  test .  Create a GitLab user as  lab_author .  Create GitLab user for students as  2013B2A7866G  and other ID numbers.  To redirect HTTP requests to HTTPS replace the gitlab.rb,localhost.key,localhost.crt files in the main directory in the container using -        sudo docker cp ./gitlab.rb gitlab:/etc/gitlab/gitlab.rb        sudo docker exec -it gitlab mkdir /etc/gitlab/ssl        sudo docker cp ./localhost.key gitlab/etc/gitlab/ssl/        sudo docker cp ./localhost.crt gitlab/etc/gitlab/ssl/",
            "title": "Setting up GitLab using Docker on Machine 1"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#deploying-load-balancer-on-machine-1",
            "text": "Clone this repo:  https://github.com/prasadtalasila/JavaAutolab  Change the directory to load_balancer and build load balancer image -  sudo docker build -t load_balancer .  To start the container, specify the full path of the directory to store the submissions. It will be mapped to  /load_balancer/submissions  of the container. Example:  sudo docker run --name load_balancer --net=host -v /home/autolab/JavaAutolab/load_balancer/submissions:/load_balancer/submissions -d -i -t load_balancer  To access the bash shell of the container  sudo docker exec -it load_balancer bash  Generate SSH key for GitLab:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user by doing the following:  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.   Define parameters in  nodes_data_config.json :  cd load_balancer   vi nodes_data_config.json  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git . Make sure the GitLab IP in the clone command and the config file is identical. (eg. localhost at both places). This is extremely important.  Run the server:  nohup nodejs load_balancer.js &  Press enter and exit.",
            "title": "Deploying Load Balancer on Machine 1"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#deploying-main-server-on-machine-1",
            "text": "Change the directory to main_server and build main server image -  sudo docker build -t main_server . .  sudo docker run --net=host --name main_server -d -i -t main_server  will give a container id.  To access the bash shell of the container  sudo docker exec -it main_server bash  Define parameters in  conf.json  and  labs.json :  cd main_server   vi conf.json   vi labs.json  Run the server:  nohup nodejs main_server.js &  Press enter and exit",
            "title": "Deploying Main Server on Machine 1"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#deploying-execution-node-on-machine-2",
            "text": "Clone this repo:  https://github.com/prasadtalasila/JavaAutolab  Build execution node image - Change the directory to execution_node and build main server image -  sudo docker build -t execution .  sudo docker run --net=host -d -i -t execution  will give a container id.  To access the bash shell of the container  sudo docker exec -it <container id> bash  Generate SSH key:  ssh-keygen -t rsa -C \"admin@example.com\" \nThis command will prompt you for a location and filename to store the key pair and for a password. When prompted for the location and filename, just press enter to use the default.  Add SSH Key to GitLab  root  user -  cat ~/.ssh/id_rsa.pub \nCopy-paste the key to the 'My SSH Keys' section under the 'SSH' tab in root profile at GitLab (Profile Settings-->SSH Keys). Please copy the complete key starting with ssh-rsa and ending with your username and host.  Clone dummy repo for ssh init -  git clone git@<gitlab_ip_without_port>:root/test.git  Define parameters in  conf.json  and  scores.json :  cd execution_nodes   vi conf.json   vi scores.json  Before proceeding further, make sure the load balancer is running.  Run the server:  nohup nodejs execute_node.js &  Press enter and exit  Now add the container Port and IP in  nodes_data_conf.json  file in the load balancer.  Repeat for upto 5 containers.",
            "title": "Deploying Execution Node on Machine 2"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#checking-deployment",
            "text": "GitLab should be accessible on  http://<machine_1_ip>  Visit  https://<machine_1_ip>:<main_server_port>/status  to see the status of all microservices.",
            "title": "Checking Deployment:"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#references",
            "text": "https://hub.docker.com/_/mysql/  http://docs.gitlab.com/omnibus/docker/  https://docs.docker.com/engine/installation/linux/ubuntulinux/",
            "title": "References"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#generating-https-keys-and-certificates-using-openssl",
            "text": "$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem   $ openssl rsa -in key.pem -out key.pem",
            "title": "Generating HTTPS keys and certificates using openssl:"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#security-rules-for-main-server-vm",
            "text": "",
            "title": "Security Rules for Main Server VM:"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#inbound-allowed",
            "text": "default-allow-ssh  Source: Any  Protocol: TCP  Port: *  Destination: Any  Port: 22  ssh  Source: Any  Protocol: TCP  Port: *  Destination: Any  Port: 2222  student_main_server  Source: Any  Protocol: Any  Port: *  Destination: Any  Port: 9000 (or the main server host port)  gitlab_http  Source: Any  Protocol: Any  Port: *  Destination: Any  Port: 80  gitlab_https  Source: Any  Protocol: Any  Port: *  Destination: Any  Port: 443",
            "title": "Inbound Allowed"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#outbound",
            "text": "None",
            "title": "Outbound"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#security-rules-for-execution-node-vm",
            "text": "",
            "title": "Security Rules for Execution Node VM:"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#inbound-allowed_1",
            "text": "default-allow-ssh  Source: Any  Protocol: TCP  Port: *  Destination: Any  Port: 22",
            "title": "Inbound Allowed"
        },
        {
            "location": "/v0.1-On-Azure-Cloud/#outbound_1",
            "text": "None",
            "title": "Outbound"
        },
        {
            "location": "/v0.1-JSON-files-documetation/",
            "text": "/main_server/conf.json\n\n\n- load_balancer -> Provides the URL of the load_balancer ('https://' + hostname + ':' +  port = URL)\n- database      -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port     -> The port at which the Main server can be accessed.\n\n\n\n/main_server/labs.json\n\n\n- Labs -> An array of objects with each element describing the propeties:-\n             1. Lab Number\n             2. Start Date and Time of the lab\n             3. End Date and Time of the lab\n             4. Hard deadlie for lab submission\n             5. Penalty\n         NOTE:- Upon submission between the End time of the lab and the hard deadline penalty will be imposed.\n                And after the hard deadline, no submissions will be accepted.\n\n\n\n/load_balancer/nodes_data_conf.json\n\n\n- Nodes       -> An array of objects in which element provides the URL ('https://' + hostname + ':' +  port = URL) of \n                 an execution nodes currently online and connected to the load balancer.\n- server_info -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the main server.\n- gitlab      -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- database    -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port   -> Provides the port though which the load balancer can be accessed.\n\n\n\n/execution_nodes/conf.json\n\n\n- load_balancer -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the load balancer all execution \n                   nodes are connected to.\n- gitlab        -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- host_port     -> The port the execution node is listening to.\n\n\n\n/execution_nodes/scores.json\n\n\n- node_details       -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the execution node.\n- submission_details -> Provides the following info for each submission that the execution node processed :- \n                          1. Marks\n                          2. Comments\n                          3. ID of the submssion\n                          4  Lab number of the submission\n                          5. Latest commit before submission\n                          6. Time of submission\n                          7. Status of submission\n                          8. Penalty incurred by student due to late submission\n                          9. Unique Socket ID of the student",
            "title": "JSON details"
        },
        {
            "location": "/v0.1-JSON-files-documetation/#main_serverconfjson",
            "text": "- load_balancer -> Provides the URL of the load_balancer ('https://' + hostname + ':' +  port = URL)\n- database      -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port     -> The port at which the Main server can be accessed.",
            "title": "/main_server/conf.json"
        },
        {
            "location": "/v0.1-JSON-files-documetation/#main_serverlabsjson",
            "text": "- Labs -> An array of objects with each element describing the propeties:-\n             1. Lab Number\n             2. Start Date and Time of the lab\n             3. End Date and Time of the lab\n             4. Hard deadlie for lab submission\n             5. Penalty\n         NOTE:- Upon submission between the End time of the lab and the hard deadline penalty will be imposed.\n                And after the hard deadline, no submissions will be accepted.",
            "title": "/main_server/labs.json"
        },
        {
            "location": "/v0.1-JSON-files-documetation/#load_balancernodes_data_confjson",
            "text": "- Nodes       -> An array of objects in which element provides the URL ('https://' + hostname + ':' +  port = URL) of \n                 an execution nodes currently online and connected to the load balancer.\n- server_info -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the main server.\n- gitlab      -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- database    -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port   -> Provides the port though which the load balancer can be accessed.",
            "title": "/load_balancer/nodes_data_conf.json"
        },
        {
            "location": "/v0.1-JSON-files-documetation/#execution_nodesconfjson",
            "text": "- load_balancer -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the load balancer all execution \n                   nodes are connected to.\n- gitlab        -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- host_port     -> The port the execution node is listening to.",
            "title": "/execution_nodes/conf.json"
        },
        {
            "location": "/v0.1-JSON-files-documetation/#execution_nodesscoresjson",
            "text": "- node_details       -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the execution node.\n- submission_details -> Provides the following info for each submission that the execution node processed :- \n                          1. Marks\n                          2. Comments\n                          3. ID of the submssion\n                          4  Lab number of the submission\n                          5. Latest commit before submission\n                          6. Time of submission\n                          7. Status of submission\n                          8. Penalty incurred by student due to late submission\n                          9. Unique Socket ID of the student",
            "title": "/execution_nodes/scores.json"
        },
        {
            "location": "/v0.2.0-Uninstall-Autolab/",
            "text": "To uninstall Autolab, go to deploy directory and run uninstall playbook.\n\n\ncd JavaAutolab/deploy\n  \n\n\nansible-playbook -i inventory uninstall.yml -u <username2> --ask-sudo-pass\n  \n\n   The username and the password to be provided are the credentials of root user of \nmachine2\n.",
            "title": "Uninstall AutolabJS"
        },
        {
            "location": "/v0.1-Creating-and-Modifying-a-lab/",
            "text": "Writing Tests\n\n\n\n\nCopy the sample \nrepository structure\n\n\nRemove \nstudent_solution\n.\n\n\nexecute.sh\n, \nDriver.java\n should not be changed under any circumstances.\n\n\ntest_cases/\n, \ninfo_file.txt\n should have the same format as followed in the files in the sample link.\n\n\nTest only one class in each test case.\n\n\nWhile writing a test case i.e. in a class called \nTest\n in \ntest_cases/Test<test_no>.java\n in function \npublic int test()\n, check only for the correctness of a value and return the marks. All other cases will be handled by the framework.\n\n\nAdd a new line corresponding to the test in \ninfo_file.txt\n. The first parameter is the test file, followed by the class to be tested and the timelimit in seconds. \n\n\nThe pushed code should have only \nauthor_solution/\n, \ntest_cases/\n, \nDriver.java\n, \nexecute.sh\n, \ninfo_file.txt\n as in the sample link.\n\n\n\n\nProcedure\n\n\n\n\nPush the testing code to GitLab in repository \nlab_author/<lab_name>\n\n\nPush the skeleton code and lab question PDF to GitLab in repository \nlab_author/lab_source/\n in directory \n<lab_name>\n\n\nAfter pushing the code, open the \nlabs.json\n file in the main server.\n\n\n\n\nAdd a new JSON entry in the Labs array which should be identical to this:\n\n\n{\n      \"Lab_No\": \"1\",\n      \"start_date\": \"2\",\n      \"start_month\": \"4\",\n      \"start_year\": \"2016\",\n      \"start_hour\": \"3\",\n      \"start_minute\": \"00\",\n      \"end_date\": \"12\",\n      \"end_month\": \"4\",\n      \"end_year\": \"2016\",\n      \"end_hour\": \"22\",\n      \"end_minute\": \"00\",\n      \"hard_date\": \"12\",\n      \"hard_month\": \"4\",\n      \"hard_year\": \"2016\",\n      \"hard_hour\": \"23\",\n      \"hard_minute\": \"10\",\n      \"penalty\": \"10\"\n    }\n\n\n\n\n\n\nRestart the web server.\n\n\n\n\n\n\nExample\n\n\n\n\nDownload skeleton directory for a lab testing framework from \ncode base\n \n\n\nLogin to GitLab with user account \nlab_author\n\n\nCreate a repo as \n<lab_name>\n. For example \nlab1\n.\n\n\nClone this repo to your local machine.\n\n\nMove the downloaded code to this repo directory.\n\n\nRemove the \nstudent_solution/\n directory.\n\n\nPut the lab solution in \nauthor_solution\n.\n\n\nexecute.sh\n, \nDriver.java\n should not be changed under any circumstances.\n\n\ntest_cases/\n, \ninfo_file.txt\n should have the same format as followed in the files in the sample link.\n\n\nTest only one class in each test case.\n\n\nFor each test case, create a class called \nTest\n in \ntest_cases/Test<test_no>.java\n in function \npublic int test()\n. For example - \nTest1.java\n should have a class called \nTest\n. \nTest\n will have a function \npublic int test()\n.\n\n\nCheck only for the correctness of a value and return the marks. All other cases will be handled by the framework. For example - if a test case is worth 2 marks, make relevant class objects and check for the correct answers using if statements. In all correct scenario, return 2 otherwise return 0. Check Test1.java in the sample repo. Don't worry about compilation errors, runtime errors/exceptions or infinite loops. These will be handled automatically.\n\n\nAdd a new line corresponding to the test in \ninfo_file.txt\n. The first parameter is the test file, followed by the class to be tested and the timelimit in seconds. For example, if the class you are testing is \nSeller.java\n in test case 1 then the corresponding entry will look like this for a \n1 second\n time limit. - \nTest1.java Seller.java 1\n. See \ninfo_file.txt\n in the sample repo for more clarity.\n\n\nRepeat above three points for as many test cases as you want.\n\n\nBy now you will have the following files \nauthor_solution/\n, \ntest_cases/\n, \nDriver.java\n, \nexecute.sh\n, \ninfo_file.txt\n as in the sample link.\n\n\nPush this code to GitLab. Your testing repo is ready.\n\n\nPut any skeleton code and lab question PDF in a repo \nlab_source\n with \n<lab_name>\n as the subdirectory. For example, \nlab_source/lab1\n.\n\n\nAfter performing the two pushes, open the \nlabs.json\n file in the main server.\n\n\n\n\nAdd a new JSON entry in the Labs array which should be identical to this:\n\n\n{\n      \"Lab_No\": \"lab1\",\n      \"start_date\": \"2\",\n      \"start_month\": \"4\",\n      \"start_year\": \"2016\",\n      \"start_hour\": \"3\",\n      \"start_minute\": \"00\",\n      \"end_date\": \"12\",\n      \"end_month\": \"4\",\n      \"end_year\": \"2016\",\n      \"end_hour\": \"22\",\n      \"end_minute\": \"00\",\n      \"hard_date\": \"12\",\n      \"hard_month\": \"4\",\n      \"hard_year\": \"2016\",\n      \"hard_hour\": \"23\",\n      \"hard_minute\": \"10\",\n      \"penalty\": \"10\"\n    }\n\n\n\n\n\n\nRestart the web server.",
            "title": "Creating a Lab"
        },
        {
            "location": "/v0.1-Creating-and-Modifying-a-lab/#writing-tests",
            "text": "Copy the sample  repository structure  Remove  student_solution .  execute.sh ,  Driver.java  should not be changed under any circumstances.  test_cases/ ,  info_file.txt  should have the same format as followed in the files in the sample link.  Test only one class in each test case.  While writing a test case i.e. in a class called  Test  in  test_cases/Test<test_no>.java  in function  public int test() , check only for the correctness of a value and return the marks. All other cases will be handled by the framework.  Add a new line corresponding to the test in  info_file.txt . The first parameter is the test file, followed by the class to be tested and the timelimit in seconds.   The pushed code should have only  author_solution/ ,  test_cases/ ,  Driver.java ,  execute.sh ,  info_file.txt  as in the sample link.",
            "title": "Writing Tests"
        },
        {
            "location": "/v0.1-Creating-and-Modifying-a-lab/#procedure",
            "text": "Push the testing code to GitLab in repository  lab_author/<lab_name>  Push the skeleton code and lab question PDF to GitLab in repository  lab_author/lab_source/  in directory  <lab_name>  After pushing the code, open the  labs.json  file in the main server.   Add a new JSON entry in the Labs array which should be identical to this:  {\n      \"Lab_No\": \"1\",\n      \"start_date\": \"2\",\n      \"start_month\": \"4\",\n      \"start_year\": \"2016\",\n      \"start_hour\": \"3\",\n      \"start_minute\": \"00\",\n      \"end_date\": \"12\",\n      \"end_month\": \"4\",\n      \"end_year\": \"2016\",\n      \"end_hour\": \"22\",\n      \"end_minute\": \"00\",\n      \"hard_date\": \"12\",\n      \"hard_month\": \"4\",\n      \"hard_year\": \"2016\",\n      \"hard_hour\": \"23\",\n      \"hard_minute\": \"10\",\n      \"penalty\": \"10\"\n    }    Restart the web server.",
            "title": "Procedure"
        },
        {
            "location": "/v0.1-Creating-and-Modifying-a-lab/#example",
            "text": "Download skeleton directory for a lab testing framework from  code base    Login to GitLab with user account  lab_author  Create a repo as  <lab_name> . For example  lab1 .  Clone this repo to your local machine.  Move the downloaded code to this repo directory.  Remove the  student_solution/  directory.  Put the lab solution in  author_solution .  execute.sh ,  Driver.java  should not be changed under any circumstances.  test_cases/ ,  info_file.txt  should have the same format as followed in the files in the sample link.  Test only one class in each test case.  For each test case, create a class called  Test  in  test_cases/Test<test_no>.java  in function  public int test() . For example -  Test1.java  should have a class called  Test .  Test  will have a function  public int test() .  Check only for the correctness of a value and return the marks. All other cases will be handled by the framework. For example - if a test case is worth 2 marks, make relevant class objects and check for the correct answers using if statements. In all correct scenario, return 2 otherwise return 0. Check Test1.java in the sample repo. Don't worry about compilation errors, runtime errors/exceptions or infinite loops. These will be handled automatically.  Add a new line corresponding to the test in  info_file.txt . The first parameter is the test file, followed by the class to be tested and the timelimit in seconds. For example, if the class you are testing is  Seller.java  in test case 1 then the corresponding entry will look like this for a  1 second  time limit. -  Test1.java Seller.java 1 . See  info_file.txt  in the sample repo for more clarity.  Repeat above three points for as many test cases as you want.  By now you will have the following files  author_solution/ ,  test_cases/ ,  Driver.java ,  execute.sh ,  info_file.txt  as in the sample link.  Push this code to GitLab. Your testing repo is ready.  Put any skeleton code and lab question PDF in a repo  lab_source  with  <lab_name>  as the subdirectory. For example,  lab_source/lab1 .  After performing the two pushes, open the  labs.json  file in the main server.   Add a new JSON entry in the Labs array which should be identical to this:  {\n      \"Lab_No\": \"lab1\",\n      \"start_date\": \"2\",\n      \"start_month\": \"4\",\n      \"start_year\": \"2016\",\n      \"start_hour\": \"3\",\n      \"start_minute\": \"00\",\n      \"end_date\": \"12\",\n      \"end_month\": \"4\",\n      \"end_year\": \"2016\",\n      \"end_hour\": \"22\",\n      \"end_minute\": \"00\",\n      \"hard_date\": \"12\",\n      \"hard_month\": \"4\",\n      \"hard_year\": \"2016\",\n      \"hard_hour\": \"23\",\n      \"hard_minute\": \"10\",\n      \"penalty\": \"10\"\n    }    Restart the web server.",
            "title": "Example"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/",
            "text": "Create Users\n\n\n\n\n\n\nEnter the BITS ID of the students in a file named 'userList'    \n\n\nEnter the details in gitlab_config (without spaces) -   \n\n  -- First line -> hostname    \n\n  -- Second line -> gitlab Administrator username  \n\n  -- Third line -> gitlab Administrator password     \n\n\nType the command \njava -jar createUsers.jar\n      \n\n\nEmail of the user will be the BITS mail \n\n\nUsername and password of the new accounts created will be their BITS IDs\n\n\n\n\nCreate Lab\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh create <lab-name>\n     \n\n\n\n\nDelete Lab\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh delete <lab-name>\n   \n\n\n\n\nAdd testcases\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh add testcase <lab-name> <path-to-dir>\n     \n\n  --\nlab-name\n is the name of the lab to which testcase will be added.   \n\n  --\npath-to-dir\n is the path(relative to misc folder/absolute) to the folder containing testcases.    \n\n\n\n\nAdd solutions\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh add solutions <lab-name> <path-to-dir>\n     \n\n  --\nlab-name\n is the name of the lab to which solutions will be added.   \n\n  --\npath-to-dir\n is the path(relative to misc folder/absolute) to the folder containing solutions.    \n\n\n\n\nAdd skeleton-code\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh add skeleton_code <lab-name> <path-to-dir>\n     \n\n  --\nlab-name\n is the name of the lab to which skeleton_code will be added.   \n\n  --\npath-to-dir\n is the path(relative to misc folder/absolute) to the folder containing the skeleton_code.    \n\n\n\n\nRemove testcases\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh remove testcase <lab-name>\n     \n\n  --\nlab-name\n is the name of the lab from which testcase will be removed.         \n\n\n\n\nRemove solutions\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh remove solutions <lab-name>\n     \n\n  --\nlab-name\n is the name of the lab from which testcase will be removed.     \n\n\n\n\nRemove skeleton-code\n\n\n\n\n\n\nrun the command -> \nsudo bash autolab.sh remove skeleton_code <lab-name>\n     \n\n  --\nlab-name\n is the name of the lab from which testcase will be removed.\n\n\n\n\nNote\n\n\n\n\nWroking directory is '/Autolab/misc' folder.\n\n\nThe userList file has to be consistent before running 'createUsers.jar'.      \n\n\nAll the IDs in the 'userList' file will get an account each time 'createUsers.jar' is run.    \n\n\n'gitlab_config' has to have the correct details before running any command from the 'autolab.sh' script.    \n\n\nA copy of the the lab will appear in the 'misc' folder.     \n\n\nWhen a project is created all the users from the 'userList' will be added as members to the project and will be given   \n\n   only view and download access (Guest privileges).",
            "title": "Automate lab/user"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#create-users",
            "text": "Enter the BITS ID of the students in a file named 'userList'      Enter the details in gitlab_config (without spaces) -    \n  -- First line -> hostname     \n  -- Second line -> gitlab Administrator username   \n  -- Third line -> gitlab Administrator password       Type the command  java -jar createUsers.jar         Email of the user will be the BITS mail   Username and password of the new accounts created will be their BITS IDs",
            "title": "Create Users"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#create-lab",
            "text": "run the command ->  sudo bash autolab.sh create <lab-name>",
            "title": "Create Lab"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#delete-lab",
            "text": "run the command ->  sudo bash autolab.sh delete <lab-name>",
            "title": "Delete Lab"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#add-testcases",
            "text": "run the command ->  sudo bash autolab.sh add testcase <lab-name> <path-to-dir>       \n  -- lab-name  is the name of the lab to which testcase will be added.    \n  -- path-to-dir  is the path(relative to misc folder/absolute) to the folder containing testcases.",
            "title": "Add testcases"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#add-solutions",
            "text": "run the command ->  sudo bash autolab.sh add solutions <lab-name> <path-to-dir>       \n  -- lab-name  is the name of the lab to which solutions will be added.    \n  -- path-to-dir  is the path(relative to misc folder/absolute) to the folder containing solutions.",
            "title": "Add solutions"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#add-skeleton-code",
            "text": "run the command ->  sudo bash autolab.sh add skeleton_code <lab-name> <path-to-dir>       \n  -- lab-name  is the name of the lab to which skeleton_code will be added.    \n  -- path-to-dir  is the path(relative to misc folder/absolute) to the folder containing the skeleton_code.",
            "title": "Add skeleton-code"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#remove-testcases",
            "text": "run the command ->  sudo bash autolab.sh remove testcase <lab-name>       \n  -- lab-name  is the name of the lab from which testcase will be removed.",
            "title": "Remove testcases"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#remove-solutions",
            "text": "run the command ->  sudo bash autolab.sh remove solutions <lab-name>       \n  -- lab-name  is the name of the lab from which testcase will be removed.",
            "title": "Remove solutions"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#remove-skeleton-code",
            "text": "run the command ->  sudo bash autolab.sh remove skeleton_code <lab-name>       \n  -- lab-name  is the name of the lab from which testcase will be removed.",
            "title": "Remove skeleton-code"
        },
        {
            "location": "/v0.1-Automate-Lab-Create-Update-Delete-Activities/#note",
            "text": "Wroking directory is '/Autolab/misc' folder.  The userList file has to be consistent before running 'createUsers.jar'.        All the IDs in the 'userList' file will get an account each time 'createUsers.jar' is run.      'gitlab_config' has to have the correct details before running any command from the 'autolab.sh' script.      A copy of the the lab will appear in the 'misc' folder.       When a project is created all the users from the 'userList' will be added as members to the project and will be given    \n   only view and download access (Guest privileges).",
            "title": "Note"
        },
        {
            "location": "/v0.1-Making-a-Submission/",
            "text": "If you haven't already, create an account on GitLab with username as your 12 character BITS ID. Example - \n2015A7PS001G\n. Provide username in capital letters only.\n\n\nCreate a private repo with the name being exactly the same as the lab name on the Main server. Example - \nlab1\n.\n\n\nOpen a terminal and type the following commands  \n\n\ngit config --global user.name \"rohit\"\n  \n\n\ngit config --global user.email \"2015A7PS001G@localhost\"\n\n\nExecute \nexport GIT_SSL_NO_VERIFY=1\n in terminal.\n\n\nClone this repo to your machine. \n\n\ngit clone https://autolab.bits-goa.ac.in/2015A7PS001G/lab1.git\n\n\nDownload skeleton code (if any) and lab question by cloning this repo - lab_author/lab_source/  \n\n\ngit clone https://autolab.bits-goa.ac.in/lab_author/lab_source.git\n    \n\n\nMove/copy the skeleton code of lab1 (if any) to your repo.\n\n\nCode!\n\n\nStage and commit the latest files to local repository.  \n\n\ngit add *\n  \n\n\ngit commit -m 'code commit message'\n\n\nPush the code to the GitLab server.  \n\n\ngit push -u origin master\n\n\nGo to the Main server(https://autolab.bits-goa.ac.in:9000) and click on submit for lab1.\n\n\nEnter you 12 character BITS ID and commit hash (optional). Commit hash is to evaluate any particular commit you made in the past or if you are working on a branch other than \nmaster\n. If you want to evaluate your latest commit on master - leave this field blank.\n\n\nClick submit.\n\n\nDebug and repeat, if necessary! \n\n\n\n\ngit help ###\n\n\nSetup git - \nGitHub\n, \nSSH\n  \n\nCaching passwords - \nwhy passwords?\n, \ncache\n  \n\nreset commits - \nreset on a branch\n \nmanaging multiple remotes - \nGitHub",
            "title": "Making a Submission"
        },
        {
            "location": "/v0.1-Making-a-Submission/#git-help",
            "text": "Setup git -  GitHub ,  SSH    \nCaching passwords -  why passwords? ,  cache    \nreset commits -  reset on a branch  \nmanaging multiple remotes -  GitHub",
            "title": "git help ###"
        },
        {
            "location": "/v0.1-Post-lab-self-evaluation/",
            "text": "This requires JDK 1.8 running on your machine.\n\n\n\n\n\n\nClone the repository - \nhttps://autolab.bits-goa.ac.in/lab_author/<lab-name>.git\n, for example    \nhttps://autolab.bits-goa.ac.in/lab_author/lab1.git\n \n\n\n\n\n\n\nMove to the cloned folder and create a directory named \nstudent_solution\n. The files in this folder will be tested. \n\n\n\n\n\n\nCopy all the \n.java\n files into this folder.  \n\n\n\n\n\n\nRun the command \nbash execute.sh\n.\nPlease note that some commands like \ntimeout\n in this bash file might not be compatible with OS X. Please change them to an equivalent command.\n\n\n\n\n\n\nscores.txt\n will contain the scores for that submission and \nlogs.txt\n will contain the errors encountered during the compilation.",
            "title": "Post lab self evaluation"
        },
        {
            "location": "/AutolabJS-v020/",
            "text": "AutolabJS v0.2.0 Documentation\n\n\nDeployment Tutorial\n\n\n\n\nInstall Autolab - \nOn single machine\n, \nOn two machines\n, \nOn Azure cloud\n       \n\n\nContainer Maintenance\n   \n\n\nJSON details\n\n\nUninstall AutolabJS\n\n\nFAQ - \nStudent\n, \nInstructor\n, \nAdministrator\n    \n\n\n\n\nTutorials for Lab Authors\n\n\n\n\nUsing AutolabJS - Initial Configuration\n\n\nCreating a Lab\n\n\nManage Course\n\n\n\n\nTutorials for Students\n\n\n\n\nMaking a Submission\n\n\nPost lab self evaluation",
            "title": "Home"
        },
        {
            "location": "/AutolabJS-v020/#autolabjs-v020-documentation",
            "text": "",
            "title": "AutolabJS v0.2.0 Documentation"
        },
        {
            "location": "/AutolabJS-v020/#deployment-tutorial",
            "text": "Install Autolab -  On single machine ,  On two machines ,  On Azure cloud          Container Maintenance      JSON details  Uninstall AutolabJS  FAQ -  Student ,  Instructor ,  Administrator",
            "title": "Deployment Tutorial"
        },
        {
            "location": "/AutolabJS-v020/#tutorials-for-lab-authors",
            "text": "Using AutolabJS - Initial Configuration  Creating a Lab  Manage Course",
            "title": "Tutorials for Lab Authors"
        },
        {
            "location": "/AutolabJS-v020/#tutorials-for-students",
            "text": "Making a Submission  Post lab self evaluation",
            "title": "Tutorials for Students"
        },
        {
            "location": "/v0.2.0-Deployment-on-Single-Machine/",
            "text": "Prerequisite\n\n\n\n\nUbuntu server 16.04 operating system.\n\n\nRecord the IP Address / domain name of the machine. If your machine has multiple IP addresses, please use the public IP address for installation purposes. Because of ease of use, domain name (DNS) is a preferred option for hostname in all the configuration files.  \n\nMost likely, your machine may be on a corporate private network with a gateway / proxy server / firewall connection to Internet. In that case, please use your machine's private ip address.  \n\nYou can locate the configured IP address of your machine using the following command.  \n\n\nip addr show\n\n    in the displayed output, look for IP address following the \ninet\n keyword.\n\n\nChange the listening port of SSH server to 2222 in \n/etc/ssh/sshd_config\n file and restart the SSH server using\nthe following command.  \n\n\nsudo service ssh restart\n   \n\n    If the SSH server is not running on your machine, please ignore the rest of this section and directly go to \nInstallation\n section.\n\n\nFor the SSH setting to be fully effective, logout of the current SSH session and relogin.\n\n\n\n\nInstallation\n\n\n\n\nClone Repository  \n\n\ngit clone https://github.com/AutolabJS/AutolabJS.git\n\n\nChange to deploy directory  \n\n\ncd AutolabJS/deploy\n\n\nExecute setup script  \n\n\n./setup.sh\n\n\nConfigure the AutolabJS components by editing the configuration files in \ndeploy/configs/<component>\n. Note that you need to use \nlocalhost\n for IP address of the machines wherever required. Unless you have special requirements, you can use the default host(name) and port numbers.  \n\nThe list of configuration files to be changed are:  \n\n\ndeploy/configs/main_server:\n APIKeys.json, conf.json, courses.json, labs.json  \n\n\ndeploy/configs/load_balancer:\n nodes_data_conf.json  \n\n\ndeploy/configs/execution_nodes:\n scores.json, conf.json    \n\n\n\n\nDo remember to change the default passwords in both the inventory file (\nAutolabJS/deploy/inventory\n) and in the configuration files. Please make sure that the changed passwords match in both the inventory file and the configuration files.  \n\nThe locations of credentials are:    \n\n\n\n\n\n\n\n\nFile\n\n\nMySQL\n\n\nGitLab\n\n\nMain Server\n\n\n\n\n\n\n\n\n\n\ndeploy/inventory\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\ndeploy/configs/main_server/APIKeys.json\n\n\n\n\n\n\n\u2714 (for /admin route)\n\n\n\n\n\n\ndeploy/configs/main_server/conf.json\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\ndeploy/configs/load_balancer/nodes_data_conf.json\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the \ngitlab\n section of inventory file, change the hostname of \ngitlab\n item from \nlocalhost\n to \nMachine IP / domain name\n. If the machine has multiple IP addresses, then please use the public IP address. The line should look like  \n\n    ```\n    [gitlab]    \n\n\n ansible_connection=local ansible_python_interpreter=/usr/bin/python2 gitlab_password=\n\n\n``\n1. Run the ansible-playbook:\nsudo ansible-playbook -i inventory playbook-single.yml\nThe username and the password to be provided are the credentials of root user  (or sudoer) of the machine.\n1. Ansible installs all the components of AutolabJS. If the previous step executes successfully, the **installation is complete**.\n1. Add cron job to restart the AutolabJS components automatically.\n1. Login as root\nsudo su\n1. Copy restart script to root account\ncp deploy/autolab-restart.sh /root/\n1. Open crontab editor as root user\ncrontab -e\n1. Enter a job in the file to run the restart script every minute.\n   * \n * \n *    bash /root/autolab-restart.sh\n1. In case of installation failure due to incorrect configuration, please see the [FAQ](https://github.com/AutolabJS/AutolabJS/wiki/v0.2.0-FAQs) page to see if you can resolve the error. If not, you can run the following commands to uninstall AutolabJS.    \n1. The uninstall command is:\nsudo ansible-playbook -i inventory uninstall.yml`  \n\n   The username and the password to be provided are the credentials of root user  (or sudoer) of the machine.\n\n\n\n\n\n\nRemove the previously generated SSH keys  \n\n\nrm -f AutolabJS/deploy/keys/main_server/*\n  \n\n\nrm -f AutolabJS/deploy/keys/load_balancer/id_rsa*\n    \n\n\n\n\n\n\nRepeat the installation step-(7) given above to install AutolabJS again.\n\n\n\n\n\n\n\n\n\n\nInstallation creates containers for main server, load balancer, execution node, data base and Gitlab. For further information on managing these containers see \ncontainer maintenance\n page.",
            "title": "Deployment-on-Single-Machine"
        },
        {
            "location": "/v0.2.0-Deployment-on-Single-Machine/#prerequisite",
            "text": "Ubuntu server 16.04 operating system.  Record the IP Address / domain name of the machine. If your machine has multiple IP addresses, please use the public IP address for installation purposes. Because of ease of use, domain name (DNS) is a preferred option for hostname in all the configuration files.   \nMost likely, your machine may be on a corporate private network with a gateway / proxy server / firewall connection to Internet. In that case, please use your machine's private ip address.   \nYou can locate the configured IP address of your machine using the following command.    ip addr show \n    in the displayed output, look for IP address following the  inet  keyword.  Change the listening port of SSH server to 2222 in  /etc/ssh/sshd_config  file and restart the SSH server using\nthe following command.    sudo service ssh restart     \n    If the SSH server is not running on your machine, please ignore the rest of this section and directly go to  Installation  section.  For the SSH setting to be fully effective, logout of the current SSH session and relogin.",
            "title": "Prerequisite"
        },
        {
            "location": "/v0.2.0-Deployment-on-Single-Machine/#installation",
            "text": "Clone Repository    git clone https://github.com/AutolabJS/AutolabJS.git  Change to deploy directory    cd AutolabJS/deploy  Execute setup script    ./setup.sh  Configure the AutolabJS components by editing the configuration files in  deploy/configs/<component> . Note that you need to use  localhost  for IP address of the machines wherever required. Unless you have special requirements, you can use the default host(name) and port numbers.   \nThe list of configuration files to be changed are:    deploy/configs/main_server:  APIKeys.json, conf.json, courses.json, labs.json    deploy/configs/load_balancer:  nodes_data_conf.json    deploy/configs/execution_nodes:  scores.json, conf.json       Do remember to change the default passwords in both the inventory file ( AutolabJS/deploy/inventory ) and in the configuration files. Please make sure that the changed passwords match in both the inventory file and the configuration files.   \nThe locations of credentials are:         File  MySQL  GitLab  Main Server      deploy/inventory  \u2714  \u2714     deploy/configs/main_server/APIKeys.json    \u2714 (for /admin route)    deploy/configs/main_server/conf.json  \u2714  \u2714     deploy/configs/load_balancer/nodes_data_conf.json  \u2714         In the  gitlab  section of inventory file, change the hostname of  gitlab  item from  localhost  to  Machine IP / domain name . If the machine has multiple IP addresses, then please use the public IP address. The line should look like   \n    ```\n    [gitlab]       ansible_connection=local ansible_python_interpreter=/usr/bin/python2 gitlab_password=  ``\n1. Run the ansible-playbook: sudo ansible-playbook -i inventory playbook-single.yml The username and the password to be provided are the credentials of root user  (or sudoer) of the machine.\n1. Ansible installs all the components of AutolabJS. If the previous step executes successfully, the **installation is complete**.\n1. Add cron job to restart the AutolabJS components automatically.\n1. Login as root sudo su 1. Copy restart script to root account cp deploy/autolab-restart.sh /root/ 1. Open crontab editor as root user crontab -e 1. Enter a job in the file to run the restart script every minute.    *   *   *    bash /root/autolab-restart.sh 1. In case of installation failure due to incorrect configuration, please see the [FAQ](https://github.com/AutolabJS/AutolabJS/wiki/v0.2.0-FAQs) page to see if you can resolve the error. If not, you can run the following commands to uninstall AutolabJS.    \n1. The uninstall command is: sudo ansible-playbook -i inventory uninstall.yml`   \n   The username and the password to be provided are the credentials of root user  (or sudoer) of the machine.    Remove the previously generated SSH keys    rm -f AutolabJS/deploy/keys/main_server/*     rm -f AutolabJS/deploy/keys/load_balancer/id_rsa*         Repeat the installation step-(7) given above to install AutolabJS again.      Installation creates containers for main server, load balancer, execution node, data base and Gitlab. For further information on managing these containers see  container maintenance  page.",
            "title": "Installation"
        },
        {
            "location": "/v0.2.0-Deployment-on-Two-Machines/",
            "text": "Prerequisite\n\n\n\n\nUbuntu server 16.04 operating system.\n\n\n\n\nRecord the Domain names, Public and Private IP Addresses and Login Credentials of both the machines. Let label the IP addresses as follows.\n\n\n\n\n\n\n\n\nMachine\n\n\nPublic IP\n\n\nPrivate IP\n\n\n\n\n\n\n\n\n\n\nFront-End-and-LB\n\n\nPublic_IP_1\n\n\nPrivate_IP_1\n\n\n\n\n\n\nExecution-Nodes\n\n\nPublic_IP_2\n\n\nPrivate_IP_2\n\n\n\n\n\n\n\n\nBecause of ease of use, domain names (DNS) are a preferred option for hostnames in all the configuration files. If you have domain names for the machines, you can use the domain names in the place of IP addresses in all the configuration files.  \n\nMost likely, your machine may be on a corporate private network with a gateway / proxy server / firewall connection to Internet. In that case, please use your machine's private ip address.  \n\nYou can locate the configured IP address of your machine using the following command.  \n\n\nip addr show\n\nin the displayed output, look for IP address following the \ninet\n keyword.\n\n\n\n\n\n\nChange the listening port of SSH server to 2222 in /etc/ssh/sshd_config file and restart the SSH server using\nthe following command.  \n\n\nsudo service ssh restart\n   \n\n    If the SSH server is not running on your machine, please ignore the rest of this section and directly go to \nOn Machine 1\n section.\n\n\n\n\nFor the SSH setting to be fully effective, logout of the current SSH session and relogin.\n\n\nFrom Machine 1, SSH into Machine 2 using its Private IP once to add the SSH server public key of Machine 2  to \n~/.ssh/known_hosts\n in Machine 1.\n\n\n\n\nOn Machine 1\n\n\n\n\nCreate SSH config file (~/.ssh/config) with the following contents.  \n\n\nHost *\n  \n\n        \u00a0\u00a0\u00a0\u00a0 \nStrictHostKeyChecking no\n  \n\n        \u00a0\u00a0\u00a0\u00a0 \nUserKnownHostsFile=/dev/null\n\n\nCreate ansible config file (~/.ansible.cfg) with the following contents  \n\n\n[defaults]\n  \n\n\nhost_key_checking = False\n    \n\n\nClone Repository  \n\n\ngit clone https://github.com/AutolabJS/AutolabJS\n\n\nChange to deploy directory  \n\n\ncd AutolabJS/deploy\n\n\nExecute setup script  \n\n\n./setup.sh\n\n\nConfigure the AutolabJS components by editing the configuration files in \ndeploy/configs/<component>\n. Note that you need to use the Private IP of the machines wherever required.  \n\nThe list of configuration files to be changed are:  \n\n\ndeploy/configs/main_server:\n APIKeys.json, conf.json, courses.json, labs.json  \n\n\ndeploy/configs/load_balancer:\n nodes_data_conf.json  \n\n\ndeploy/configs/execution_nodes:\n scores.json, conf.json    \n\n\n\n\nEdit the ansible inventory file. You can find the \ninventory\n in \nAutolabJS/deploy\n directory.\n\n\n\n\n\n\nUpdate the credentials as required. Please make sure that the changed passwords match in both the inventory file and the configuration files. \n\n The locations of credentials are:    \n\n\n\n\n\n\n\n\nFile\n\n\nMySQL\n\n\nGitLab\n\n\nMain Server\n\n\n\n\n\n\n\n\n\n\ndeploy/inventory\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\ndeploy/configs/main_server/APIKeys.json\n\n\n\n\n\n\n\u2714 (for /admin route)\n\n\n\n\n\n\ndeploy/configs/main_server/conf.json\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\ndeploy/configs/load_balancer/nodes_data_conf.json\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the \ngitlab\n section of inventory file, change the hostname of \ngitlab\n item from \nlocalhost\n to \nPublic IP\n. The line should look like  \n\n```\n[gitlab]    \n\n\n\n\n\n\n ansible_connection=local ansible_python_interpreter=/usr/bin/python2 gitlab_password=\n\n```\nThe only exception to the use of private IP is given in the above line. If your Gitlab installation runs on a computer with one public IP address and one private IP address, use the public_IP_1 address in the above line. Otherwise, use private_IP_1 address.    \n\n\n\n\n\n\nIn the \nloadbalancer\n section of inventory file, change \ngitlab_hostname\n variable in loadbalancer group to \nPrivate IP\n of Machine 1.  \n\n    ```\n    [loadbalancer]    \n\n\nlocalhost ansible_connection=local ansible_python_interpreter=/usr/bin/python2 submissions_dir=../load_balancer/submissions gitlab_hostname=\n gitlab_password=12345678\n\n4. In the `executionnodes` section of inventory file, change the hostname of **executionnode** item to **Private IP** of Execution Node and change gitlab_hostname variable to **Private IP** of Machine 1. The connection to execution nodes is changed from localhost to ssh. The line should look like\n\n[executionnodes]    \n\n\n ansible_connection=ssh ansible_user=\n ansible_password=\n ansible_python_interpreter=/usr/bin/python2 gitlab_hostname=\n gitlab_password=12345678 port=8082\n\n``\n1. Run the ansible-playbook\nsudo ansible-playbook -i inventory playbook.yml -u \n --ask-sudo-pass`  \n\n   The username and the password to be provided are the credentials of root user of \nmachine2\n.\n\n\n\n\n\n\nAnsible installs all the components of AutolabJS. If the previous step executes successfully, the \ninstallation is complete\n.\n\n\n\n\n\n\nAdd cron job to restart the AutolabJS components automatically. You need to do this on both the machines.\n\n\n\n\nLogin as root  \n\n\nsudo su\n\n\nCopy restart script to root account on both the machines \n\n\ncp deploy/autolab-restart.sh /root/\n  \n\n   You need to use \nsftp\n to copy autolab-restart.sh script to machine2.\n\n\nOpen crontab editor as root user  \n\n\ncrontab -e\n\n\nEnter a job in the file to run the restart script every minute.  \n\n\n* * * * *    bash /root/autolab-restart.sh\n\n\n\n\n\n\n\n\nIn case of installation failure due to incorrect configuration, please see the \nFAQ\n page to see if you can resolve the error. If not, you can run the following commands to uninstall AutolabJS.   \n\n\n\n\n\n\nThe uninstall command is:  \n\n\nsudo ansible-playbook -i inventory uninstall.yml -u <username2> --ask-sudo-pass\n  \n\n   The username and the password to be provided are the credentials of root user of \nmachine2\n.\n\n\n\n\n\n\nRemove the previously generated SSH keys  \n\n\nrm -f AutolabJS/deploy/keys/main_server/*\n  \n\n\nrm -f AutolabJS/deploy/keys/load_balancer/id_rsa*\n    \n\n\n\n\n\n\nCheck the configuration done in steps - (6), (7) and Repeat the installation step-(8) given above.\n\n\n\n\n\n\n\n\n\n\nAfter successful installation, delete SSH and ansible configuration files.  \n\n\nrm ~/.ssh/config ~/.ansible.cfg\n\n\n\n\n\n\nInstallation creates containers for main server, load balancer, execution node, data base and Gitlab. For further information on managing these containers see \ncontainer maintenance\n page.",
            "title": "On two machines"
        },
        {
            "location": "/v0.2.0-Deployment-on-Two-Machines/#prerequisite",
            "text": "Ubuntu server 16.04 operating system.   Record the Domain names, Public and Private IP Addresses and Login Credentials of both the machines. Let label the IP addresses as follows.     Machine  Public IP  Private IP      Front-End-and-LB  Public_IP_1  Private_IP_1    Execution-Nodes  Public_IP_2  Private_IP_2     Because of ease of use, domain names (DNS) are a preferred option for hostnames in all the configuration files. If you have domain names for the machines, you can use the domain names in the place of IP addresses in all the configuration files.   \nMost likely, your machine may be on a corporate private network with a gateway / proxy server / firewall connection to Internet. In that case, please use your machine's private ip address.   \nYou can locate the configured IP address of your machine using the following command.    ip addr show \nin the displayed output, look for IP address following the  inet  keyword.    Change the listening port of SSH server to 2222 in /etc/ssh/sshd_config file and restart the SSH server using\nthe following command.    sudo service ssh restart     \n    If the SSH server is not running on your machine, please ignore the rest of this section and directly go to  On Machine 1  section.   For the SSH setting to be fully effective, logout of the current SSH session and relogin.  From Machine 1, SSH into Machine 2 using its Private IP once to add the SSH server public key of Machine 2  to  ~/.ssh/known_hosts  in Machine 1.",
            "title": "Prerequisite"
        },
        {
            "location": "/v0.2.0-Deployment-on-Two-Machines/#on-machine-1",
            "text": "Create SSH config file (~/.ssh/config) with the following contents.    Host *    \n        \u00a0\u00a0\u00a0\u00a0  StrictHostKeyChecking no    \n        \u00a0\u00a0\u00a0\u00a0  UserKnownHostsFile=/dev/null  Create ansible config file (~/.ansible.cfg) with the following contents    [defaults]     host_key_checking = False       Clone Repository    git clone https://github.com/AutolabJS/AutolabJS  Change to deploy directory    cd AutolabJS/deploy  Execute setup script    ./setup.sh  Configure the AutolabJS components by editing the configuration files in  deploy/configs/<component> . Note that you need to use the Private IP of the machines wherever required.   \nThe list of configuration files to be changed are:    deploy/configs/main_server:  APIKeys.json, conf.json, courses.json, labs.json    deploy/configs/load_balancer:  nodes_data_conf.json    deploy/configs/execution_nodes:  scores.json, conf.json       Edit the ansible inventory file. You can find the  inventory  in  AutolabJS/deploy  directory.    Update the credentials as required. Please make sure that the changed passwords match in both the inventory file and the configuration files.  \n The locations of credentials are:         File  MySQL  GitLab  Main Server      deploy/inventory  \u2714  \u2714     deploy/configs/main_server/APIKeys.json    \u2714 (for /admin route)    deploy/configs/main_server/conf.json  \u2714  \u2714     deploy/configs/load_balancer/nodes_data_conf.json  \u2714         In the  gitlab  section of inventory file, change the hostname of  gitlab  item from  localhost  to  Public IP . The line should look like   \n```\n[gitlab]         ansible_connection=local ansible_python_interpreter=/usr/bin/python2 gitlab_password= \n```\nThe only exception to the use of private IP is given in the above line. If your Gitlab installation runs on a computer with one public IP address and one private IP address, use the public_IP_1 address in the above line. Otherwise, use private_IP_1 address.        In the  loadbalancer  section of inventory file, change  gitlab_hostname  variable in loadbalancer group to  Private IP  of Machine 1.   \n    ```\n    [loadbalancer]      localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python2 submissions_dir=../load_balancer/submissions gitlab_hostname=  gitlab_password=12345678 4. In the `executionnodes` section of inventory file, change the hostname of **executionnode** item to **Private IP** of Execution Node and change gitlab_hostname variable to **Private IP** of Machine 1. The connection to execution nodes is changed from localhost to ssh. The line should look like \n[executionnodes]       ansible_connection=ssh ansible_user=  ansible_password=  ansible_python_interpreter=/usr/bin/python2 gitlab_hostname=  gitlab_password=12345678 port=8082 ``\n1. Run the ansible-playbook sudo ansible-playbook -i inventory playbook.yml -u   --ask-sudo-pass`   \n   The username and the password to be provided are the credentials of root user of  machine2 .    Ansible installs all the components of AutolabJS. If the previous step executes successfully, the  installation is complete .    Add cron job to restart the AutolabJS components automatically. You need to do this on both the machines.   Login as root    sudo su  Copy restart script to root account on both the machines   cp deploy/autolab-restart.sh /root/    \n   You need to use  sftp  to copy autolab-restart.sh script to machine2.  Open crontab editor as root user    crontab -e  Enter a job in the file to run the restart script every minute.    * * * * *    bash /root/autolab-restart.sh     In case of installation failure due to incorrect configuration, please see the  FAQ  page to see if you can resolve the error. If not, you can run the following commands to uninstall AutolabJS.       The uninstall command is:    sudo ansible-playbook -i inventory uninstall.yml -u <username2> --ask-sudo-pass    \n   The username and the password to be provided are the credentials of root user of  machine2 .    Remove the previously generated SSH keys    rm -f AutolabJS/deploy/keys/main_server/*     rm -f AutolabJS/deploy/keys/load_balancer/id_rsa*         Check the configuration done in steps - (6), (7) and Repeat the installation step-(8) given above.      After successful installation, delete SSH and ansible configuration files.    rm ~/.ssh/config ~/.ansible.cfg    Installation creates containers for main server, load balancer, execution node, data base and Gitlab. For further information on managing these containers see  container maintenance  page.",
            "title": "On Machine 1"
        },
        {
            "location": "/v0.2.0-On-Azure-Cloud/",
            "text": "Deploying on Single Machine\n\n\n\n\nCreate single VM in an Azure resource manager group.\n\n\n\n\nIn the resource group, change the firewall (network security group) settings as follows.\n\n\nInbound Allowed\n\n\n\n\n\n\n\n\nName\n\n\nSource\n\n\nProtocol\n\n\nPort\n\n\nDestination\n\n\nPort\n\n\n\n\n\n\n\n\n\n\ndefault-allow-ssh\n\n\nAny\n\n\nTCP\n\n\n*\n\n\nAny\n\n\n22\n\n\n\n\n\n\nssh\n\n\nAny\n\n\nTCP\n\n\n*\n\n\nAny\n\n\n2222\n\n\n\n\n\n\nwebapp\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n9000\n\n\n\n\n\n\ngitlab\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n80\n\n\n\n\n\n\ngitlab_https\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n443\n\n\n\n\n\n\n\n\nOutbound Allowed\n\n\nNone\n\n\n\n\n\n\nFrom this point onward, follow the instructions given on \nDeployment on Single Machine\n page.\n\n\n\n\n\n\nDeploying on Two Machines\n\n\n\n\nCreate two VMs in one Azure resource manager group. You can name these containers as \nFront-End-and-LB\n and \nExecution-Nodes\n\n\n\n\nIn \nFront-End-and-LB\n VM, change the firewall (network security group) settings as follows.\n\n\nInbound Allowed\n\n\n\n\n\n\n\n\nName\n\n\nSource\n\n\nProtocol\n\n\nPort\n\n\nDestination\n\n\nPort\n\n\n\n\n\n\n\n\n\n\ndefault-allow-ssh\n\n\nAny\n\n\nTCP\n\n\n*\n\n\nAny\n\n\n22\n\n\n\n\n\n\nssh\n\n\nAny\n\n\nTCP\n\n\n*\n\n\nAny\n\n\n2222\n\n\n\n\n\n\nwebapp\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n9000\n\n\n\n\n\n\ngitlab\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n80\n\n\n\n\n\n\ngitlab_https\n\n\nAny\n\n\nAny\n\n\n*\n\n\nAny\n\n\n443\n\n\n\n\n\n\n\n\nOutbound Allowed\n\n\nNone\n\n\n\n\n\n\nIn \nExecution-Nodes\n VM, there is no need to change any firewall settings.\n\n\nInbound Allowed\n  \n\nNone\n\n\nOutbound Allowed\n  \n\nNone\n\n\n\n\n\n\nFrom this point onward, follow the instructions given on \nDeployment on Two Machines\n page.",
            "title": "On Azure cloud"
        },
        {
            "location": "/v0.2.0-On-Azure-Cloud/#deploying-on-single-machine",
            "text": "Create single VM in an Azure resource manager group.   In the resource group, change the firewall (network security group) settings as follows.  Inbound Allowed     Name  Source  Protocol  Port  Destination  Port      default-allow-ssh  Any  TCP  *  Any  22    ssh  Any  TCP  *  Any  2222    webapp  Any  Any  *  Any  9000    gitlab  Any  Any  *  Any  80    gitlab_https  Any  Any  *  Any  443     Outbound Allowed  None    From this point onward, follow the instructions given on  Deployment on Single Machine  page.",
            "title": "Deploying on Single Machine"
        },
        {
            "location": "/v0.2.0-On-Azure-Cloud/#deploying-on-two-machines",
            "text": "Create two VMs in one Azure resource manager group. You can name these containers as  Front-End-and-LB  and  Execution-Nodes   In  Front-End-and-LB  VM, change the firewall (network security group) settings as follows.  Inbound Allowed     Name  Source  Protocol  Port  Destination  Port      default-allow-ssh  Any  TCP  *  Any  22    ssh  Any  TCP  *  Any  2222    webapp  Any  Any  *  Any  9000    gitlab  Any  Any  *  Any  80    gitlab_https  Any  Any  *  Any  443     Outbound Allowed  None    In  Execution-Nodes  VM, there is no need to change any firewall settings.  Inbound Allowed    \nNone  Outbound Allowed    \nNone    From this point onward, follow the instructions given on  Deployment on Two Machines  page.",
            "title": "Deploying on Two Machines"
        },
        {
            "location": "/v0.2.0-Container-Maintenance/",
            "text": "Ansible can be used to start/stop/restart the containers. All the commands need to be executed from \nJavaAutolb/deploy\n directory. The following commands can be used for the same.\n\n\n\n\nDatabase\n\n\nStart Container\n  \nsudo ansible -i inventory mysql --become --ask-become-pass  -m docker_container -a \"name=autolab-db state=started\"\n\n\nStop Container\n  \nsudo ansible -i inventory mysql --become --ask-become-pass  -m docker_container -a \"name=autolab-db state=stopped\"\n\n\n\n\nRestart Container\n  \nsudo ansible -i inventory mysql --become --ask-become-pass  -m docker_container -a \"name=autolab-db state=started  restart=yes\"\n\n\n\n\n\n\nGitlab\n\n\n\n\nStart Container\n  \nsudo ansible -i inventory gitlab --become --ask-become-pass  -m docker_container -a \"name=gitlab state=started\"\n\n\nStop Container\n  \nsudo ansible -i inventory gitlab --become --ask-become-pass  -m docker_container -a \"name=gitlab state=stopped\"\n\n\nRestart Container\n  \nsudo ansible -i inventory gitlab --become --ask-become-pass  -m docker_container -a \"name=gitlab state=started   restart=yes\"\n\n\nLoadbalancer\n\n\nStart Container\n  \nsudo ansible -i inventory loadbalancer --become --ask-become-pass  -m docker_container -a \"name=loadbalancer state=started\"\n\n\nStop Container\n  \nsudo ansible -i inventory loadbalancer --become --ask-become-pass  -m docker_container -a \"name=loadbalancer state=stopped\"\n\n\n\n\nRestart Container\n  \nsudo ansible -i inventory loadbalancer --become --ask-become-pass  -m docker_container -a \"name=loadbalancer  state=started restart=yes\"\n\n\n\n\n\n\nMain Server\n\n\n\n\nStart Container\n  \nsudo ansible -i inventory mainserver --become --ask-become-pass  -m docker_container -a \"name=mainserver state=started\"\n\n\nStop Container\n  \nsudo ansible -i inventory mainserver --become --ask-become-pass  -m docker_container -a \"name=mainserver state=stopped\"\n\n\n\n\nRestart Container\n  \nsudo ansible -i inventory mainserver --become --ask-become-pass  -m docker_container -a \"name=mainserver  state=started restart=yes\"\n\n\n\n\n\n\nExecution Node\n\n\n\n\nStart Container\n  \nsudo ansible -i inventory executionnodes --become --ask-become-pass  -m docker_container -a \"name=execution-node-<ip>-<port> state=started\"\n\n\nStop Container\n  \nsudo ansible -i inventory executionnodes --become --ask-become-pass  -m docker_container -a \"name=execution-node-<ip>-<port> state=stopped\"\n\n\nRestart Container\n  \nsudo ansible -i inventory executionnodes --become --ask-become-pass  -m docker_container -a \"name=execution-node-<ip>-<port> state=started restart=yes\"\n\n\n\n\nUseful Docker Commands ##\n\n\ndocker cp \n \n (src and dst can be on containers) \n\ndocker inspect \n  \n\n\ndocker images\n  \n\ndocker ps  \n\ndocker ps -a  \n\n\ndocker images export and import",
            "title": "Container Maintenance"
        },
        {
            "location": "/v0.2.0-Container-Maintenance/#useful-docker-commands",
            "text": "docker cp     (src and dst can be on containers)  \ndocker inspect      docker images    \ndocker ps   \ndocker ps -a    docker images export and import",
            "title": "Useful Docker Commands ##"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/",
            "text": "Main Server\n\n\n/main_server/APIKeys.json\n\n\n- keys -> an array containing instructor's password for logging into /admin area\n\n\n\n/main_server/courses.json\n\n\n- name -> course name\n- course number -> official course number\n- instructor in charge -> name of lead instructor for the course\n- other instructors -> co-instructors, TAs / PAs specified in array format\n\n\n\n/main_server/conf.json\n\n\n- load_balancer -> Provides the URL of the load_balancer ('https://' + hostname + ':' +  port = URL)\n- database      -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port     -> The port at which the Main server can be accessed.\n\n\n\n/main_server/labs.json\n\n\n- Labs -> An array of objects with each element describing the propeties:-\n             1. Lab Number\n             2. Start Date and Time of the lab\n             3. End Date and Time of the lab\n             4. Hard deadlie for lab submission\n             5. Penalty\n         NOTE:- Upon submission between the End time of the lab and the hard deadline penalty will be imposed.\n                And after the hard deadline, no submissions will be accepted.\n\n\n\n\n\nLoad Balancer\n\n\n/load_balancer/nodes_data_conf.json\n\n\n- Nodes       -> An array of objects in which element provides the URL ('https://' + hostname + ':' +  port = URL) of \n                 an execution nodes currently online and connected to the load balancer.\n- server_info -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the main server.\n- gitlab      -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- database    -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port   -> Provides the port though which the load balancer can be accessed.\n\n\n\n/execution_nodes/conf.json\n\n\n- load_balancer -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the load balancer all execution \n                   nodes are connected to.\n- gitlab        -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- host_port     -> The port the execution node is listening to.\n\n\n\n\n\nExecution Nodes\n\n\n/execution_nodes/scores.json\n\n\n- node_details       -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the execution node.\n- submission_details -> Provides the following info for each submission that the execution node processed :- \n                          1. Marks\n                          2. Comments\n                          3. ID of the submssion\n                          4  Lab number of the submission\n                          5. Latest commit before submission\n                          6. Time of submission\n                          7. Status of submission\n                          8. Penalty incurred by student due to late submission\n                          9. Unique Socket ID of the student",
            "title": "JSON details"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#main-server",
            "text": "",
            "title": "Main Server"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#main_serverapikeysjson",
            "text": "- keys -> an array containing instructor's password for logging into /admin area",
            "title": "/main_server/APIKeys.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#main_servercoursesjson",
            "text": "- name -> course name\n- course number -> official course number\n- instructor in charge -> name of lead instructor for the course\n- other instructors -> co-instructors, TAs / PAs specified in array format",
            "title": "/main_server/courses.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#main_serverconfjson",
            "text": "- load_balancer -> Provides the URL of the load_balancer ('https://' + hostname + ':' +  port = URL)\n- database      -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port     -> The port at which the Main server can be accessed.",
            "title": "/main_server/conf.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#main_serverlabsjson",
            "text": "- Labs -> An array of objects with each element describing the propeties:-\n             1. Lab Number\n             2. Start Date and Time of the lab\n             3. End Date and Time of the lab\n             4. Hard deadlie for lab submission\n             5. Penalty\n         NOTE:- Upon submission between the End time of the lab and the hard deadline penalty will be imposed.\n                And after the hard deadline, no submissions will be accepted.",
            "title": "/main_server/labs.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#load-balancer",
            "text": "",
            "title": "Load Balancer"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#load_balancernodes_data_confjson",
            "text": "- Nodes       -> An array of objects in which element provides the URL ('https://' + hostname + ':' +  port = URL) of \n                 an execution nodes currently online and connected to the load balancer.\n- server_info -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the main server.\n- gitlab      -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- database    -> Provides the authentication credentials for the MYSQL databse.\n                   Name of the database used in MYSQL= Autolab\n- host_port   -> Provides the port though which the load balancer can be accessed.",
            "title": "/load_balancer/nodes_data_conf.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#execution_nodesconfjson",
            "text": "- load_balancer -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the load balancer all execution \n                   nodes are connected to.\n- gitlab        -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the gitlab server.\n- host_port     -> The port the execution node is listening to.",
            "title": "/execution_nodes/conf.json"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#execution-nodes",
            "text": "",
            "title": "Execution Nodes"
        },
        {
            "location": "/v0.2.0-JSON-files-documetation/#execution_nodesscoresjson",
            "text": "- node_details       -> Provides the URL ('https://' + hostname + ':' +  port = URL) of the execution node.\n- submission_details -> Provides the following info for each submission that the execution node processed :- \n                          1. Marks\n                          2. Comments\n                          3. ID of the submssion\n                          4  Lab number of the submission\n                          5. Latest commit before submission\n                          6. Time of submission\n                          7. Status of submission\n                          8. Penalty incurred by student due to late submission\n                          9. Unique Socket ID of the student",
            "title": "/execution_nodes/scores.json"
        },
        {
            "location": "/v0.2.0-Uninstall-Autolab/",
            "text": "To uninstall Autolab, go to deploy directory and run uninstall playbook.\n\n\ncd JavaAutolab/deploy\n  \n\n\nansible-playbook -i inventory uninstall.yml -u <username2> --ask-sudo-pass\n  \n\n   The username and the password to be provided are the credentials of root user of \nmachine2\n.",
            "title": "Uninstall AutolabJS"
        },
        {
            "location": "/v0.2.0-Student-FAQs/",
            "text": "Gitlab\n\n\n\n\nI am having the Gitlab repository cloning problem. How do I resolve this problem?  \n\n\nAns:\n Try `git clone https://username@hostname/username/repo.git",
            "title": "Student"
        },
        {
            "location": "/v0.2.0-Student-FAQs/#gitlab",
            "text": "I am having the Gitlab repository cloning problem. How do I resolve this problem?    Ans:  Try `git clone https://username@hostname/username/repo.git",
            "title": "Gitlab"
        },
        {
            "location": "/v0.2.0-Instructor-FAQs/",
            "text": "Web Application\n\n\n\n\n\n\nI modified the course / lab settings in \nadmin\n section, but the changes are not reflected in the main page. What should I do to reflect the configuration changes?  \n\n\nAns:\n Please restart the mainserver container using  \n\n\ncd JavaAutolab/deploy\n  \n\n\nsudo ansible -i inventory mainserver --become --ask-become-pass  -m docker_container -a \"name=mainserver  state=started restart=yes\"\n    \n\n\n\n\n\n\nI create a lab with non-alphanumeric character in lab name, ex: \"dsa-lab1\". The Autolab system breaks down.  \n\n\nAns:\n The lab names can only contain alphanumeric characters (a-z, A-Z, 0-9). A lab name can not start with an integer. Please change the name of the lab in labs.json file either from terminal or from \nadmin\n section. Once the lab name is updated, ask the administrator to restart the relevant autolab components using the commands.\n    \nshell\n    $sudo docker restart mainserver\n    $sudo docker restart loadbalancer",
            "title": "Instructor"
        },
        {
            "location": "/v0.2.0-Instructor-FAQs/#web-application",
            "text": "I modified the course / lab settings in  admin  section, but the changes are not reflected in the main page. What should I do to reflect the configuration changes?    Ans:  Please restart the mainserver container using    cd JavaAutolab/deploy     sudo ansible -i inventory mainserver --become --ask-become-pass  -m docker_container -a \"name=mainserver  state=started restart=yes\"         I create a lab with non-alphanumeric character in lab name, ex: \"dsa-lab1\". The Autolab system breaks down.    Ans:  The lab names can only contain alphanumeric characters (a-z, A-Z, 0-9). A lab name can not start with an integer. Please change the name of the lab in labs.json file either from terminal or from  admin  section. Once the lab name is updated, ask the administrator to restart the relevant autolab components using the commands.\n     shell\n    $sudo docker restart mainserver\n    $sudo docker restart loadbalancer",
            "title": "Web Application"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/",
            "text": "General\n\n\n\n\nHow many machines do I need to run Autolab?  \n\n\nAns:\n Autolab can support up to 200 concurrent students on a single machine with 4GB RAM and dual-core processors, 40GB hard disk space. Autolab can easily support up to 600 students with take home style of home work assignments.\n\n\n\n\nInstallation\n\n\n\n\n\n\nThe configuration file seems to be full of IP addresses. Does the Autolab support domain names (DNS)?  \n\n\nAns:\n The domain names are supported and are in fact the preferred way of specifying the hostnames in all the configuration files.\n\n\n\n\n\n\nI tried to run the Ansible playbook twice and got the database error shown below.  \n\n\nTASK [Create Autolab database] *************************************************\n  \n\n\nfatal: [localhost]: FAILED! => {\"changed\": true, \"cmd\": [\"docker\", \"exec\", \"autolab-db\", \"bash\", \"-c\", \"mysql -u root -proot -e 'CREATE DATABASE Autolab'\"], \"delta\": \"0:00:01.447437\", \"end\": \"2016-11-28 02:28:17.562664\", \"failed\": true, \"rc\": 1, \"start\": \"2016-11-28 02:28:16.115227\", \"stderr\": \"mysql: [Warning] Using a password on the command line interface can be insecure.\\nERROR 1007 (HY000) at line 1: Can't create database 'Autolab'; database exists\", \"stdout\": \"\", \"stdout_lines\": [], \"warnings\": []}\n    \n\n\n\n\n\n\nWhat should I do now?  \n\n\nAns:\n Comment (Please put a # symbol at the beginning of each line) lines 41 and 42 of \nplaybook.yml\n file. Now run the installation command again. That should install the Autolab setup properly.  \n\nAnother solution is to look at deleting an existing Autolab database completely. Please understand that choosing this option leads to data loss. Given that caveat, you can try the following recipe.    \n\n\n$sudo docker exec -it autolab-db bash\n#mysql -u root -p          #on prompt, enter the DB root password set in \"inventory\" file\nmysql>DROP DATABASE Autolab;\nmysql>quit\n#exit\n\n\n\n\n\n\nI got the installation error with Gitlab server with the error shown below.  \n\n\nTASK [Waiting for Unicorn on GitLab server to be up] ***************************\n  \n\n\nfatal: [13.65.36.224]: FAILED! => {\"changed\": true, \"cmd\": \"docker exec gitlab bash -c \\\"/wait-for-it.sh -t 300 127.0.0.1:8080\\\"\", \"delta\": \"0:05:00.112174\", \"end\": \"2016-11-28 02:17:04.006885\", \"failed\": true, \"rc\": 124, \"start\": \"2016-11-28 02:12:03.894711\", \"stderr\": \"wait-for-it.sh: waiting 300 seconds for 127.0.0.1:8080\\nwait-for-it.sh: timeout occurred after waiting 300 seconds for 127.0.0.1:8080\", \"stdout\": \"\", \"stdout_lines\": [], \"warnings\": []}\n  \n\n    \u00a0\u00a0\u00a0\u00a0\nto retry, use: --limit @/home/autolab/JavaAutolab/deploy/playbook.retry\n    \n\n\n\n\nWhat should I do now?  \n\n\nAns:\n Comment (Please put a # symbol at the beginning of each line) lines 41 and 42 of \nplaybook.yml\n file. Now run the installation command again. That should install the Autolab setup properly.\n\n\n\n\nI made a configuration mistake in one of the containers (i.e., mainserver, loadbalancer or execution nodes) and that container is restarting. What should I do now?  \n\n\nAns:\n First stop the container using the following command  \n\n\nsudo docker stop <container_name>\n  \n\nCorrect the configuration in the configuration files available in the following locations.  \n\nmainserver --> JavaAutolab/deploy/configs/main_server/\n.json  \n\nloadbalancer --> JavaAutolab/deploy/configs/load_balancer/\n.json  \n\nexecution_nodes... --> /root/.autolab/configs/execution_nodes  \n\nAND then restart the respective container.    \n\n\n\n\nLoad Balancer\n\n\n\n\nMy evaluation requests get stuck forever. Upon checking the load balancer logs, I see socket connection refused message. Why?  \n\n\nAns:\n The scores.json file of the execution nodes are not configured properly. Please correctly set the hostname and port parameters in scores.json for each of the execution nodes.    \n\n\n\n\nExecution Nodes\n\n\n\n\n\n\nHow do I add more execution nodes?  \n\n\nAns:\n We have not automated the process for this step. In general the outline for adding extra execution nodes is as follows.    \n\n\n\n\n\n\nLogin to the machine running the execution node. In a two machine setup, this would be Machine 2. In a single machine setup, the steps would be followed on the same machine.\n\n\n\n\n\n\nChange to root user.  \n\n\nsudo su\n\n\n\n\n\n\nChange to execution node SSH keys directory.  \n\n\ncd /root/.autolab/keys\n (for two machine case, this path would be on machine-2)  \n\n\ncd ~/.autolab/keys\n (for single machine case, ~ refers to home directory of logged in user)    \n\n\n\n\n\n\nCreate a new directory with the intended name of execution node, for ex: execution-node-10.0.0.5-8083.  \n\n\nmkdir execution-node-10.0.0.5-8083\n    \n\n\n\n\n\n\nChange to the newly created directory.  \n\n\ncd execution-node-10.0.0.5-8083\n    \n\n\n\n\n\n\nCreate a new SSH key for the execution node.  \n\n\nssh-keygen -t rsa -C 'admin@javaautolab.com' -f id_rsa -N ''\n\n\n\n\n\n\nAdd the public key to ssh keys of \nroot\n user in Gitlab. Follow this \nGitlab guide\n if you need help with this step.\n\n\n\n\n\n\nChange to configs directory.  \n\n\ncd /root/.autolab/configs\n (for two machine case, this path would be on machine-2)  \n\n\ncd ~/.autolab/configs\n (for single machine case, ~ refers to home directory of logged in user)    \n\n\n\n\n\n\nCopy the existing settings of an execution node into new directory, say \nexecution_nodes2\n.  \n\n\ncp -r execution_nodes execution_nodes2\n\n\n\n\n\n\nChange the host port in \nexecution_nodes2/conf.json\n to one higher, non-used port, say 8083.\n\n\n\n\n\n\nSet the hostname and port parameters in \nexecution_nodes2/scores.json\n appropriately. The hostname field is the IP address of the machine on which the execution node container is to be run. The port field needs to be one higher, non-used port, say 8083.\n\n\n\n\n\n\nUse the existing docker image \nexecution_node\n to run a new container with name, say \nexecution-node-10.0.0.5-8083\n.  \n\n\ndocker run --net=host --name=execution-node-10.0.0.5-8083 -e GITLAB_IP='10.0.0.4' -v /etc/localtime:/etc/localtime:ro -v /root/.autolab/configs/execution_nodes2:/etc/execution_node -v /root/.autolab/keys/execution-node-10.0.0.5-8083:/root/.ssh/ -dit execution_node\n\n\n\n\n\n\nExit the super user account.  \n\n\nexit\n\n\n\n\n\n\nUpdate the load balancer configuration to add new execution node.  \n\n\n\"Nodes\": [\n       {\n         \"hostname\": \"10.0.0.5\",\n         \"port\": \"8082\"\n       },\n       {\n         \"hostname\": \"10.0.0.5\",\n         \"port\": \"8083\"\n       }\n   .......rest of configuration file continues\n\n\n\n\n\n\nRestart the load balancer.  \n\n\nsudo ansible -i inventory loadbalancer --become --ask-become-pass  -m docker_container -a \"name=loadbalancer  state=started restart=yes\"\n\n\n\n\n\n\n\n\n\n\nWhat is the role of scores.json configuration file?  \n\n\nAns:\n Execution node uses json object format specified in scores.json to configure itself. Please set the \nhostname\n and \nport\n of each execution node properly.\n\n\n\n\n\n\ngitlab\n\n\n\n\n\n\nHow do I change my gitlab server IP address?  \n\n\nAns:\n First, make sure that your gitlab container is up and running. \nThen follow these steps:  \n\n\n$sudo docker stop gitlab\n  \n\n\n$sudo docker rm gitlab\n  \n\n\n$sudo docker run --detach --hostname gitlab.example.com -e GITLAB_ROOT_PASSWORD=\"<pwd>\" -e GITLAB_OMNIBUS_CONFIG=\"external_url 'https://<new_ip>'; nginx['redirect_http_to_https'] = true;\" --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n  \n\n\n$sudo docker exec -it gitlab bash\n  \n\n\n#gitlab-ctl reconfigure\n  \n\n\n#gitlab-ctl restart\n\n\nChange the \n and \n variables to suit your scenario.\n\n\n\n\n\n\nI am not able to send / receive forgotten password emails from gitlab. What should I do?  \n\n\nAns:\n You need to enable SMTP settings in Gitlab. Modify the \n/etc/gitlab/gitlab.rb\n file in gitlab container as per the instructions available on the gitlab \nsmtp settings\n page.  \n\n    Reconfigure gitlab using the command  \n\n\ngitlab-ctl reconfigure\n  \n\n    send a test mail to yourself by using the following commands  \n\n\ngitlab-rails console\n  \n\n    From gitlab ruby terminal, type  \n\n\nirb(main):003:0> Notify.test_email('<your_mail_id>', 'Message Subject', 'Message Body').deliver_now\n  \n\n    Most mail providers like Gmail and Yahoo need modifications to settings in their mail accounts from \nmore secure\n to \nless secure\n in order for the mail account to be used for sending gitlab email.\n\n\n\n\n\n\nI forgot the \nroot\n password of gitlab. Is there a way to recover the same?  \n\n\nAns:\n You can recover the password using \ninstructions\n from GitLab.\n\n\n\n\n\n\nHow do I disable groups feature for regular users?  \n\n\nAns:\n Please see the \ngroups documentation\n available on gitlab.",
            "title": "Administrator"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/#general",
            "text": "How many machines do I need to run Autolab?    Ans:  Autolab can support up to 200 concurrent students on a single machine with 4GB RAM and dual-core processors, 40GB hard disk space. Autolab can easily support up to 600 students with take home style of home work assignments.",
            "title": "General"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/#installation",
            "text": "The configuration file seems to be full of IP addresses. Does the Autolab support domain names (DNS)?    Ans:  The domain names are supported and are in fact the preferred way of specifying the hostnames in all the configuration files.    I tried to run the Ansible playbook twice and got the database error shown below.    TASK [Create Autolab database] *************************************************     fatal: [localhost]: FAILED! => {\"changed\": true, \"cmd\": [\"docker\", \"exec\", \"autolab-db\", \"bash\", \"-c\", \"mysql -u root -proot -e 'CREATE DATABASE Autolab'\"], \"delta\": \"0:00:01.447437\", \"end\": \"2016-11-28 02:28:17.562664\", \"failed\": true, \"rc\": 1, \"start\": \"2016-11-28 02:28:16.115227\", \"stderr\": \"mysql: [Warning] Using a password on the command line interface can be insecure.\\nERROR 1007 (HY000) at line 1: Can't create database 'Autolab'; database exists\", \"stdout\": \"\", \"stdout_lines\": [], \"warnings\": []}         What should I do now?    Ans:  Comment (Please put a # symbol at the beginning of each line) lines 41 and 42 of  playbook.yml  file. Now run the installation command again. That should install the Autolab setup properly.   \nAnother solution is to look at deleting an existing Autolab database completely. Please understand that choosing this option leads to data loss. Given that caveat, you can try the following recipe.      $sudo docker exec -it autolab-db bash\n#mysql -u root -p          #on prompt, enter the DB root password set in \"inventory\" file\nmysql>DROP DATABASE Autolab;\nmysql>quit\n#exit   I got the installation error with Gitlab server with the error shown below.    TASK [Waiting for Unicorn on GitLab server to be up] ***************************     fatal: [13.65.36.224]: FAILED! => {\"changed\": true, \"cmd\": \"docker exec gitlab bash -c \\\"/wait-for-it.sh -t 300 127.0.0.1:8080\\\"\", \"delta\": \"0:05:00.112174\", \"end\": \"2016-11-28 02:17:04.006885\", \"failed\": true, \"rc\": 124, \"start\": \"2016-11-28 02:12:03.894711\", \"stderr\": \"wait-for-it.sh: waiting 300 seconds for 127.0.0.1:8080\\nwait-for-it.sh: timeout occurred after waiting 300 seconds for 127.0.0.1:8080\", \"stdout\": \"\", \"stdout_lines\": [], \"warnings\": []}    \n    \u00a0\u00a0\u00a0\u00a0 to retry, use: --limit @/home/autolab/JavaAutolab/deploy/playbook.retry        What should I do now?    Ans:  Comment (Please put a # symbol at the beginning of each line) lines 41 and 42 of  playbook.yml  file. Now run the installation command again. That should install the Autolab setup properly.   I made a configuration mistake in one of the containers (i.e., mainserver, loadbalancer or execution nodes) and that container is restarting. What should I do now?    Ans:  First stop the container using the following command    sudo docker stop <container_name>    \nCorrect the configuration in the configuration files available in the following locations.   \nmainserver --> JavaAutolab/deploy/configs/main_server/ .json   \nloadbalancer --> JavaAutolab/deploy/configs/load_balancer/ .json   \nexecution_nodes... --> /root/.autolab/configs/execution_nodes   \nAND then restart the respective container.",
            "title": "Installation"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/#load-balancer",
            "text": "My evaluation requests get stuck forever. Upon checking the load balancer logs, I see socket connection refused message. Why?    Ans:  The scores.json file of the execution nodes are not configured properly. Please correctly set the hostname and port parameters in scores.json for each of the execution nodes.",
            "title": "Load Balancer"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/#execution-nodes",
            "text": "How do I add more execution nodes?    Ans:  We have not automated the process for this step. In general the outline for adding extra execution nodes is as follows.        Login to the machine running the execution node. In a two machine setup, this would be Machine 2. In a single machine setup, the steps would be followed on the same machine.    Change to root user.    sudo su    Change to execution node SSH keys directory.    cd /root/.autolab/keys  (for two machine case, this path would be on machine-2)    cd ~/.autolab/keys  (for single machine case, ~ refers to home directory of logged in user)        Create a new directory with the intended name of execution node, for ex: execution-node-10.0.0.5-8083.    mkdir execution-node-10.0.0.5-8083         Change to the newly created directory.    cd execution-node-10.0.0.5-8083         Create a new SSH key for the execution node.    ssh-keygen -t rsa -C 'admin@javaautolab.com' -f id_rsa -N ''    Add the public key to ssh keys of  root  user in Gitlab. Follow this  Gitlab guide  if you need help with this step.    Change to configs directory.    cd /root/.autolab/configs  (for two machine case, this path would be on machine-2)    cd ~/.autolab/configs  (for single machine case, ~ refers to home directory of logged in user)        Copy the existing settings of an execution node into new directory, say  execution_nodes2 .    cp -r execution_nodes execution_nodes2    Change the host port in  execution_nodes2/conf.json  to one higher, non-used port, say 8083.    Set the hostname and port parameters in  execution_nodes2/scores.json  appropriately. The hostname field is the IP address of the machine on which the execution node container is to be run. The port field needs to be one higher, non-used port, say 8083.    Use the existing docker image  execution_node  to run a new container with name, say  execution-node-10.0.0.5-8083 .    docker run --net=host --name=execution-node-10.0.0.5-8083 -e GITLAB_IP='10.0.0.4' -v /etc/localtime:/etc/localtime:ro -v /root/.autolab/configs/execution_nodes2:/etc/execution_node -v /root/.autolab/keys/execution-node-10.0.0.5-8083:/root/.ssh/ -dit execution_node    Exit the super user account.    exit    Update the load balancer configuration to add new execution node.    \"Nodes\": [\n       {\n         \"hostname\": \"10.0.0.5\",\n         \"port\": \"8082\"\n       },\n       {\n         \"hostname\": \"10.0.0.5\",\n         \"port\": \"8083\"\n       }\n   .......rest of configuration file continues    Restart the load balancer.    sudo ansible -i inventory loadbalancer --become --ask-become-pass  -m docker_container -a \"name=loadbalancer  state=started restart=yes\"      What is the role of scores.json configuration file?    Ans:  Execution node uses json object format specified in scores.json to configure itself. Please set the  hostname  and  port  of each execution node properly.",
            "title": "Execution Nodes"
        },
        {
            "location": "/v0.2.0-Administrator-FAQs/#gitlab",
            "text": "How do I change my gitlab server IP address?    Ans:  First, make sure that your gitlab container is up and running. \nThen follow these steps:    $sudo docker stop gitlab     $sudo docker rm gitlab     $sudo docker run --detach --hostname gitlab.example.com -e GITLAB_ROOT_PASSWORD=\"<pwd>\" -e GITLAB_OMNIBUS_CONFIG=\"external_url 'https://<new_ip>'; nginx['redirect_http_to_https'] = true;\" --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab --restart always --volume /srv/gitlab/config:/etc/gitlab --volume /srv/gitlab/logs:/var/log/gitlab --volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest     $sudo docker exec -it gitlab bash     #gitlab-ctl reconfigure     #gitlab-ctl restart  Change the   and   variables to suit your scenario.    I am not able to send / receive forgotten password emails from gitlab. What should I do?    Ans:  You need to enable SMTP settings in Gitlab. Modify the  /etc/gitlab/gitlab.rb  file in gitlab container as per the instructions available on the gitlab  smtp settings  page.   \n    Reconfigure gitlab using the command    gitlab-ctl reconfigure    \n    send a test mail to yourself by using the following commands    gitlab-rails console    \n    From gitlab ruby terminal, type    irb(main):003:0> Notify.test_email('<your_mail_id>', 'Message Subject', 'Message Body').deliver_now    \n    Most mail providers like Gmail and Yahoo need modifications to settings in their mail accounts from  more secure  to  less secure  in order for the mail account to be used for sending gitlab email.    I forgot the  root  password of gitlab. Is there a way to recover the same?    Ans:  You can recover the password using  instructions  from GitLab.    How do I disable groups feature for regular users?    Ans:  Please see the  groups documentation  available on gitlab.",
            "title": "gitlab"
        },
        {
            "location": "/v0.2.0-Using-Autolab-in-a-Course/",
            "text": "Please follow the steps given below in strict order.\n\n\n\n\nIf Autolab is not already installed, please do install the same. For labs with less than 200 students, We suggest that you deploy all the components of Autolab on a single machine. Please follow the instructions given on \nsingle machine deployment\n page.\n\n\nCheck the status of Autolab components. Let's say the IP address of the machine is denoted by \nmachine_IP\n. In case you configured the Autolab for a domain name instead of IP address, please use the domain name in the following URLs.\n\n\n\n\n\n\n\n\n\n\nURL\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://machine_IP\n\n\nshows GitLab component home page\n\n\n\n\n\n\nhttps://machine_IP:9000\n\n\nAutolab home page\n\n\n\n\n\n\nhttps://machine_IP:9000/admin\n\n\nAutolab administration page\n\n\n\n\n\n\nhttps://machine_IP:9000/status\n\n\nStatus of load balancer and execution nodes\n\n\n\n\n\n\n\n\nAll the above listed components must work before going to next step. If a component is not working, please \nuninstall\n and reinstall Autolab again.\n1. Go to \nGitLab\n home page (https://machine_IP) and login as root user (using the gitlab root password set in deploy/inventory file). Create a user named \nlab_author\n. Do remember to set an appropriate password for \nlab_author\n. You can set / reset the password of a user by following these steps.\n    1. Login gitlab with root account.\n    1. Admin area--->users---> [search user and select] ---> edit ---> set password.\n1. The \nlab_author\n user account acts as the repository for posting the solutions and evaluation code for all the programming labs.\n1. The self sign-up option is enabled by default on GitLab. At this time, you can advise the students to sign-up for an account on GitLab. The username must be alpha-numeric with no special characters.\n1. Go to the admin page of Autolab (https://machine_IP:9000/admin) to configure the labs. Autolab asks for the admin passkey (the key in \ndeploy/configs/main_server/APIKeys.json\n). Autolab authenticates the course administrator against a known pass key. After pass key authentication, Create one lab with appropriate settings. Remember to save the result by clicking on save button. Sign out of course admin section.\n1. To make the new settings effective, restart the \nmainserver\n autolab component.  \n\n\nsudo docker restart mainserver\n  \n\n1. The lab name given in Gitlab and the Lab_No (a string type) of labs.json / Lab name of admin config should exactly match for any proper setup.\n1. See gitlab documentation on \nproject creation\n for familiarity with project creation process.  \n\n1. Create a solution and evaluation code for the lab. Please follow the instructions given on \ncreating and modifying a lab\n to complete this step.\n1. Now, you can ask the students to submit their code for evaluation. Students can follow the instructions given on \nmaking a submission\n to complete the auto evaluation process.    \n\n\nReferences\n\n\n\n\nGitlab \ndocumentation",
            "title": "Using AutolabJS-Initial Configuration"
        },
        {
            "location": "/v0.2.0-Using-Autolab-in-a-Course/#references",
            "text": "Gitlab  documentation",
            "title": "References"
        },
        {
            "location": "/v0.2.0-Creating-and-Modifying-a-lab/",
            "text": "Estimated task completion time: first time setup - 90 minutes; second time onwards - 30 minutes\n\n\nSample Repository Structure: \nexamples\n\n\nInstructions for writing tests depend on the kind of tests you wish to write for a lab. The available options are:\n\n\n\n\nJUnit-based labs\n\n\nInput-Output (IO) tests using\n\n\nSource code\n\n\nCompiled binaries\n\n\n\n\n\n\n\n\nThe given example folder contains unit tests for Object Oriented Programming (OOP) course. Source code based IO-tests are from Data Structures and Algorithms (DSA) course. Compiled binary based IO tests are for Compiler Design course.",
            "title": "Creating a Lab"
        },
        {
            "location": "/v0.2.0-Manage-Course/",
            "text": "You can manage the creation, update and deletion of labs from the website of your installation. You can also edit the course details from the webpage of the installation.The instructions for managing the labs are given below.\n\n\n\n\n\n\nLogin\n  \n\n    Open the admin URL: \nhttps://autolab.bits-goa.ac.in:9000/admin\n. You will be shown a form with a Login Key. Please enter the login key specified in \nAutolabJS/deploy/configs/main_server/APIKeys.json\n.\n\n\n\n\n\n\nChoose Configure\n  \n\n    You will be shown a page with \nConfigure\n and \nRevaluate\n buttons. Of the two, only \nConfigure\n is working. Click on \nConfigure\n button.\n\n\n\n\n\n\nEdit Course Details\n  \n\n    [[images/admin-course-details.png]]\n\n\n\n\n\n\nEdit Existing Labs\n  \n\n    You will be shown a series of tabs, each tab corresponding to a lab. If you would like to delete a lab, all you have to do is click on the cross-mark corresponding the the lab.  \n\n    [[images/admin-labs.png]]\n\n\nIf you want to edit the details of the lab, click anywhere on the tab except the cross-mark. You will be shown a filled form. You can edit the lab details as per your requirements.  \n\n[[images/admin-lab-edit.png]]\n\n\n\n\n\n\nCreate New Lab\n  \n\n    Click on \nAdd Labs\n button. A new tab will be added to the page. You can click on the newly added tab to see an empty form. A layout of the form is shown below. You can fill the details of the form.  \n\n    [[images/admin-lab-create.png]]  \n\n    (NOTE: The time is to be specified in HH:MM format, ex: 13:30 for 1:30PM and 4:00 for 4AM)    \n\n\nPlease also note that the name of the lab should be same as the gitlab repository, i.e., each lab created on the website should have a corresponding gitlab repository with same name for successful evaluation.    \n\n\n\n\n\n\nSave\n  \n\n     After the editing work is complete, click on \nSave\n button.\n     After completing the configuration, do remember to \nlogout\n.\n\n\n\n\n\n\nRestart Main Server\n  \n\n    Login to the computer running the mainserver container and restart the mainserver container.  \n\n\nshell\n    $ sudo docker restart mainserver\n\n    Now, the modifications shall be reflected on the website.",
            "title": "Manage Course"
        },
        {
            "location": "/v0.2.0-Making-a-Submission/",
            "text": "Estimated task completion time: first time setup - 15 minutes\n\n\nInstructions for submitting code depends on the kind of tests your instructor has written for a lab. The available options are:\n\n\n\n\nUnit tests\n\n\nInput-Output (IO) tests using\n\n\nSource code\n\n\nCompiled binaries\n\n\n\n\n\n\n\n\nIn the past, unit and integration tests were used for Object Oriented Programming (OOP) course. Source code based IO-tests are used for Data Structures and Algorithms (DSA) course. Compiled binary based IO tests are used for Compiler Design course.",
            "title": "Making a Submission"
        },
        {
            "location": "/v0.2.0-Post-lab-self-evaluation/",
            "text": "Prerequisites\n\n\n\n\nFollowing all the steps given here requires availability of the compiler + interpreter of a chosen programming language.    \n\n\nYou are using Ubuntu 16.04 Operating System.\n\n\n\n\nSelf Evaluation\n  \n\nThe steps for self-evaluation are as follows.\n\n\n\n\n\n\nClone the code base\n.   \n\n    For the same of illustration, let us assume that your username is 2012A7PS001G and you are interested in self-evaluation for \"lab1\".\n   \nshell\n    $git clone https://autolab.bits-goa.ac.in/lab_author/lab1.git\n    $git clone https://autolab.bits-goa.ac.in/lab_author/lab1.git 2017A7PS001G\n\n\n\n\n\n\nCopy your code to \nstudent_solution\n.\n   \nshell\n    $mkdir lab1/student_solution\n    $cp 2017A7PS001G/* lab1/student_solution/\n\n\n\n\n\n\nEvaluate  yourself\n.  \n\n\nshell\n    $bash execute.sh language-key\n\n   The languages and their keys are:  \n\n   C - c, C++ 2011 - cpp, C++ 2014 - cpp14, Java - java, Python2 - python2, Python3 - python3    \n\n\n\n\n\n\nThe output shall be saved in \nresults/\n directory. The \nresults/scores.txt\n will contain the scores for that submission and \nresults/logs.txt\n will contain the errors encountered during the compilation.",
            "title": "Post lab self evaluation"
        },
        {
            "location": "/AutolabJS-coding-standards/",
            "text": "Adherence to the following coding standards would be good.\n\n\n\n\nWhat counts finally are the \nTested Features in Use\n. \n\n\nThree values of any software are: features, simple design and feedback. Testing is the only way to simplify the design. So consider improvement in all the three values.    \n\n\nA stable release is mandatory for stable and predictable end-user installation.    \n\n\nDesign and code should clearly articulate the interactions / stories / metaphors of the problem domain. PRACTICE DESIGN and IMPLEMENTATION in DOMAIN.    \n\n\nAdherence to java script coding standards as prescribed by eminent authorities.\n\n\nJava Script : The Good Parts, \nDouglas Crockford\n / \nEloquent Javascript\n, Marijn Haverbeke.  \n\nBefore each commit, a committer runs \nESLint\n, \nJSHint\n and \nJSLint Errors\n on the code-base and fixes all the error and warning messages. \n\n\nShell scripts : Shell script coding standard by \nKfir Lavi\n and \nRobert Muth\n. Before each commit, a committer runs \nshellcheck\n on the code-base and fixes all the error and warning messages.    \n\n\n\n\n\n\nAll the new code commits shall have at least the unit tests. For JS, use \nmochai\n and \nchai\n. For shell script, use \nBats\n.    \n\n\nCreation and adherence to coding standard checklist. At the moment, we are following the \nproject checklist\n from MIT course, \n6.170 Software Studio\n\n\nAn issue reported should have a detailed bug report that can help replicate the problem.\n\n\nAlways maintain clean separation of coding, testing, integration, deployment and production stages. \n\n\nNEVER EVER CODE ON THE PRODUCTION SYSTEM\n.\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\nRTF : A Metric Leading to Agility\n, Ron Jeffries.\n\n\nMeasuring Agile Projects Using Running Tested Features Metrics\n, Priyanjana Deb and Abhik Datta\n\n\nThe Joel Test: 12 steps to Better Code\n, Joel Spolsky    \n\n\nBrian W Kernighan on Testing\n    \n\n\nWorse is Better\n \nHistory\n    \n\n\nTwelve-factor apps\n    \n\n\nAgile Manifesto\n    \n\n\nSoftware project best practices checklist\n, Krist\u00f3f KOV\u00c1CS\n\n\nDevelopment process - \nMike Perks @ IBM\n     \n\n\nJB Rainsberger - \nAn introduction to Agile Software Development\n, \nEconomics of Software Design\n    \n\n\nCI best practices check list - Piotr Oktaba",
            "title": "AutloabJS Coding Standards"
        },
        {
            "location": "/AutolabJS-coding-standards/#references",
            "text": "RTF : A Metric Leading to Agility , Ron Jeffries.  Measuring Agile Projects Using Running Tested Features Metrics , Priyanjana Deb and Abhik Datta  The Joel Test: 12 steps to Better Code , Joel Spolsky      Brian W Kernighan on Testing       Worse is Better   History       Twelve-factor apps       Agile Manifesto       Software project best practices checklist , Krist\u00f3f KOV\u00c1CS  Development process -  Mike Perks @ IBM        JB Rainsberger -  An introduction to Agile Software Development ,  Economics of Software Design       CI best practices check list - Piotr Oktaba",
            "title": "References"
        },
        {
            "location": "/autolabcli/",
            "text": "",
            "title": "AutolabCLI"
        },
        {
            "location": "/docs/",
            "text": "",
            "title": "Documentation"
        },
        {
            "location": "/website/",
            "text": "",
            "title": "AutolabWebsite"
        }
    ]
}